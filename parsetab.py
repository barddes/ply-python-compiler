
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALSleftORANDleftEQNEGTGELTLEleftPLUSPLUSMINUSMINUSleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEEQUALS ELSE EQ EQUALS EXMARK FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSEQUALS MINUSMINUS MOD MODEQUALS NE OR PLUS PLUSEQUALS PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STR_CONST TIMES TIMESEQUALS VOID WHILE program : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration : declaration\n         global_declaration : function_definition\n         function_definition : type_specifier declarator declaration_list_opt compound_statement\n                                | declarator declaration_list_opt compound_statement\n         declaration_list : declaration\n                             | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                 | empty\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         declaration : type_specifier init_declarator_list_opt SEMI\n         declarator : direct_declarator\n                       | pointer_opt direct_declarator\n         pointer_opt : TIMES pointer\n                        | TIMES empty\n         pointer : pointer_opt\n         direct_declarator : identifier\n                              | LPAREN declarator RPAREN\n                              | direct_declarator LBRACKET constant_expression_opt RBRACKET\n                              | direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list_opt RPAREN\n         identifier : ID\n         constant_expression_opt : constant_expression\n                                    | empty\n         identifier_list : identifier\n                            | identifier_list identifier\n         identifier_list_opt : identifier_list\n                                | empty\n         constant_expression : binary_expression\n         binary_expression : cast_expression\n                              | binary_expression TIMES binary_expression\n                              | binary_expression DIVIDE binary_expression\n                              | binary_expression MOD binary_expression\n                              | binary_expression PLUS binary_expression\n                              | binary_expression MINUS binary_expression\n                              | binary_expression LT binary_expression\n                              | binary_expression LE binary_expression\n                              | binary_expression GT binary_expression\n                              | binary_expression GE binary_expression\n                              | binary_expression EQ binary_expression\n                              | binary_expression NE binary_expression\n                              | binary_expression AND binary_expression\n                              | binary_expression OR binary_expression\n         cast_expression : unary_expression\n                            | LPAREN type_specifier RPAREN cast_expression\n         unary_expression : postfix_expression\n                             | PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n         postfix_expression : primary_expression\n                               | postfix_expression LBRACKET expression RBRACKET\n                               | postfix_expression LPAREN argument_expression_opt RPAREN\n                               | postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         argument_expression_opt : argument_expression\n                                    | empty\n         primary_expression : identifier\n                               | constant\n                               | LPAREN expression RPAREN\n         constant : INT_CONST\n                     | CHAR_CONST\n                     | FLOAT_CONST\n                     | STR_CONST\n         expression : assignment_expression\n                       | expression COMMA assignment_expression\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | TIMESEQUALS\n                                | DIVIDEEQUALS\n                                | MODEQUALS\n                                | PLUSEQUALS\n                                | MINUSEQUALS\n         unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | EXMARK\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n         init_declarator_list_opt : init_declarator_list\n                                     | empty\n         init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         initializer : assignment_expression\n                        | LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         compound_statement : LBRACE declaration_list_opt statement_list_opt RBRACE\n         statement_list : statement\n                           | statement_list statement\n         statement_list_opt : statement_list\n                               | empty\n         statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n         expression_statement : expression_opt SEMI\n         expression_opt : expression\n                           | empty\n         selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n                                | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n         jump_statement : BREAK SEMI\n                           | RETURN expression_opt SEMI\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         empty :\n        '
    
_lr_action_items = {'RETURN':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,145,-105,-111,-108,-110,-106,-107,-101,-112,-109,145,-100,-113,-121,-102,-122,-123,145,145,-125,-124,-118,-116,145,145,-117,145,-120,-119,]),'READ':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,146,-105,-111,-108,-110,-106,-107,-101,-112,-109,146,-100,-113,-121,-102,-122,-123,146,146,-125,-124,-118,-116,146,146,-117,146,-120,-119,]),'VOID':([0,2,5,8,11,12,13,16,17,18,22,24,26,33,34,37,56,70,71,72,74,76,106,107,109,110,180,181,],[3,-2,3,-17,-4,-27,-5,3,-22,-18,3,-3,3,3,-8,-16,3,-23,3,-7,-9,-6,-24,-26,-25,3,3,-100,]),'LBRACKET':([8,12,17,18,40,42,43,45,46,47,55,62,70,82,85,106,107,109,128,169,170,],[25,-27,-22,25,-63,-66,-67,-65,-68,83,-55,-62,-23,-58,-59,-24,-26,-25,-64,-56,-57,]),'CHAR_CONST':([25,33,34,35,37,39,44,48,49,52,53,54,56,57,61,71,74,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[42,-10,-8,-11,-16,42,-84,-83,42,-85,42,-82,42,42,-81,-126,-9,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-77,-75,-79,42,-78,-80,-76,42,42,-105,42,42,-111,-108,-110,-106,-107,-101,-112,-109,42,42,42,42,42,42,42,-100,-113,42,-121,-102,-122,-123,42,42,42,42,-125,-124,-118,42,-116,42,42,42,-117,42,-120,-119,]),'FLOAT_CONST':([25,33,34,35,37,39,44,48,49,52,53,54,56,57,61,71,74,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[43,-10,-8,-11,-16,43,-84,-83,43,-85,43,-82,43,43,-81,-126,-9,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-77,-75,-79,43,-78,-80,-76,43,43,-105,43,43,-111,-108,-110,-106,-107,-101,-112,-109,43,43,43,43,43,43,43,-100,-113,43,-121,-102,-122,-123,43,43,43,43,-125,-124,-118,43,-116,43,43,43,-117,43,-120,-119,]),'PRINT':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,148,-105,-111,-108,-110,-106,-107,-101,-112,-109,148,-100,-113,-121,-102,-122,-123,148,148,-125,-124,-118,-116,148,148,-117,148,-120,-119,]),'MINUS':([12,25,33,34,35,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,61,62,71,74,77,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,147,150,151,152,153,154,155,156,162,164,167,169,170,171,172,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[-27,44,-10,-8,-11,-16,44,-63,-49,-66,-67,-84,-65,-68,-51,-83,44,-35,-85,44,-82,-55,44,44,103,-81,-62,-126,-9,-49,44,103,-58,44,44,-59,-54,-52,44,-53,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-77,-75,-79,44,-78,-80,-76,44,-64,44,103,103,103,-37,103,-36,103,103,-39,103,-40,103,-38,-105,44,44,-111,-108,-110,-106,-107,-101,-112,-109,44,44,-56,-57,44,-50,44,44,44,44,-100,-113,44,-121,-102,-122,-123,44,44,44,44,-125,-124,-118,44,-116,44,44,44,-117,44,-120,-119,]),'DIVIDE':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,96,-62,-49,96,-58,-59,-54,-52,-53,-64,96,96,96,-37,96,-36,96,96,96,96,96,96,-38,-56,-57,-50,]),'INT_CONST':([25,33,34,35,37,39,44,48,49,52,53,54,56,57,61,71,74,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[45,-10,-8,-11,-16,45,-84,-83,45,-85,45,-82,45,45,-81,-126,-9,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-77,-75,-79,45,-78,-80,-76,45,45,-105,45,45,-111,-108,-110,-106,-107,-101,-112,-109,45,45,45,45,45,45,45,-100,-113,45,-121,-102,-122,-123,45,45,45,45,-125,-124,-118,45,-116,45,45,45,-117,45,-120,-119,]),'LE':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,95,-62,-49,95,-58,-59,-54,-52,-53,-64,95,95,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'RPAREN':([3,7,8,12,14,15,17,18,26,30,40,41,42,43,45,46,47,50,55,62,63,65,66,67,68,69,70,77,81,82,84,85,86,87,89,90,91,92,106,107,108,109,111,123,124,125,126,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,165,166,169,170,172,173,174,178,188,190,192,193,196,207,209,210,212,],[-12,-13,-17,-27,-14,-15,-22,-18,-126,70,-63,-49,-66,-67,-65,-68,-51,-35,-55,-62,107,109,-86,-30,-32,-33,-23,-49,-73,-58,-126,-59,-54,-52,-69,127,128,-53,-24,-26,-88,-25,-31,-71,170,-61,-60,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-87,-114,-74,-56,-57,-50,-70,-115,-126,-72,197,198,199,202,-126,-126,213,215,]),'FOR':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,158,-105,-111,-108,-110,-106,-107,-101,-112,-109,158,-100,-113,-121,-102,-122,-123,158,158,-125,-124,-118,-116,158,158,-117,158,-120,-119,]),'SEMI':([3,4,7,8,12,14,15,17,18,19,20,21,22,23,32,33,34,35,37,40,41,42,43,45,46,47,50,55,62,70,71,73,74,75,77,78,79,81,82,85,86,87,89,92,106,107,109,112,128,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,150,151,152,153,154,155,156,157,160,162,163,164,165,166,168,169,170,172,173,174,175,177,180,181,182,184,185,187,189,191,194,195,197,198,199,200,201,202,203,204,205,206,208,211,213,214,215,216,217,],[-12,-126,-13,-17,-27,-14,-15,-22,-18,-89,37,-90,-93,-91,-126,-10,-8,-11,-16,-63,-49,-66,-67,-65,-68,-51,-35,-55,-62,-23,-126,-93,-9,-92,-49,-94,-95,-73,-58,-59,-54,-52,-69,-53,-24,-26,-25,-126,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-105,-126,-111,-108,-110,-106,-107,-101,-112,-115,182,-109,184,-126,-114,-74,-96,-56,-57,-50,-70,-115,189,191,-126,-100,-113,-121,-102,-97,-122,-123,200,-126,203,204,-126,-126,207,-126,-125,-124,-118,209,-116,-126,-126,-117,-126,-120,-119,]),'STR_CONST':([25,33,34,35,37,39,44,48,49,52,53,54,56,57,61,71,74,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[46,-10,-8,-11,-16,46,-84,-83,46,-85,46,-82,46,46,-81,-126,-9,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-77,-75,-79,46,-78,-80,-76,46,46,-105,46,46,-111,-108,-110,-106,-107,-101,-112,-109,46,46,46,46,46,46,46,-100,-113,46,-121,-102,-122,-123,46,46,46,46,-125,-124,-118,46,-116,46,46,46,-117,46,-120,-119,]),'DIVIDEEQUALS':([12,40,41,42,43,45,46,47,55,62,77,82,85,86,87,92,128,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-55,-62,113,-58,-59,-54,-52,-53,-64,-56,-57,-50,]),'NE':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,104,-62,-49,104,-58,-59,-54,-52,-53,-64,104,104,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'LT':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,99,-62,-49,99,-58,-59,-54,-52,-53,-64,99,99,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'COMMA':([8,12,17,18,19,22,23,40,41,42,43,45,46,47,50,55,62,65,66,70,73,75,77,78,79,81,82,85,86,87,89,91,92,106,107,108,109,120,121,122,123,126,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,165,166,168,169,170,172,173,177,186,187,188,190,193,196,],[-17,-27,-22,-18,36,-93,-91,-63,-49,-66,-67,-65,-68,-51,-35,-55,-62,110,-86,-23,-93,-92,-49,-94,-95,-73,-58,-59,-54,-52,-69,129,-53,-24,-26,-88,-25,-98,167,129,-71,171,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-87,129,-74,-96,-56,-57,-50,-70,129,-99,-97,-72,171,129,129,]),'MODEQUALS':([12,40,41,42,43,45,46,47,55,62,77,82,85,86,87,92,128,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-55,-62,117,-58,-59,-54,-52,-53,-64,-56,-57,-50,]),'PLUS':([12,25,33,34,35,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,61,62,71,74,77,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,147,150,151,152,153,154,155,156,162,164,167,169,170,171,172,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[-27,48,-10,-8,-11,-16,48,-63,-49,-66,-67,-84,-65,-68,-51,-83,48,-35,-85,48,-82,-55,48,48,101,-81,-62,-126,-9,-49,48,101,-58,48,48,-59,-54,-52,48,-53,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-77,-75,-79,48,-78,-80,-76,48,-64,48,101,101,101,-37,101,-36,101,101,-39,101,-40,101,-38,-105,48,48,-111,-108,-110,-106,-107,-101,-112,-109,48,48,-56,-57,48,-50,48,48,48,48,-100,-113,48,-121,-102,-122,-123,48,48,48,48,-125,-124,-118,48,-116,48,48,48,-117,48,-120,-119,]),'TIMESEQUALS':([12,40,41,42,43,45,46,47,55,62,77,82,85,86,87,92,128,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-55,-62,119,-58,-59,-54,-52,-53,-64,-56,-57,-50,]),'$end':([2,5,6,11,13,24,37,72,76,181,],[-2,-1,0,-4,-5,-3,-16,-7,-6,-100,]),'GT':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,100,-62,-49,100,-58,-59,-54,-52,-53,-64,100,100,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'RBRACE':([12,33,34,35,37,40,41,42,43,45,46,47,50,55,62,71,74,77,79,81,82,85,86,87,92,112,120,121,128,130,131,132,133,134,135,136,137,138,139,140,141,142,144,150,151,152,153,154,155,156,157,159,162,164,166,167,168,169,170,172,181,182,184,185,186,187,189,191,203,204,205,208,214,216,217,],[-27,-10,-8,-11,-16,-63,-49,-66,-67,-65,-68,-51,-35,-55,-62,-126,-9,-49,-95,-73,-58,-59,-54,-52,-53,-126,-98,168,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-105,-111,-108,-110,-106,-107,-101,-112,-104,181,-109,-103,-74,187,-96,-56,-57,-50,-100,-113,-121,-102,-99,-97,-122,-123,-125,-124,-118,-116,-117,-120,-119,]),'EXMARK':([25,33,34,35,37,39,44,48,49,52,53,54,56,57,61,71,74,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[52,-10,-8,-11,-16,52,-84,-83,52,-85,52,-82,52,52,-81,-126,-9,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-77,-75,-79,52,-78,-80,-76,52,52,-105,52,52,-111,-108,-110,-106,-107,-101,-112,-109,52,52,52,52,52,52,52,-100,-113,52,-121,-102,-122,-123,52,52,52,52,-125,-124,-118,52,-116,52,52,52,-117,52,-120,-119,]),'PLUSPLUS':([12,25,33,34,35,37,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,61,62,71,74,80,82,83,84,85,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,128,129,144,145,147,150,151,152,153,154,155,156,162,164,167,169,170,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[-27,53,-10,-8,-11,-16,53,-63,-66,-67,-84,-65,-68,82,-83,53,-85,53,-82,-55,53,53,-81,-62,-126,-9,53,-58,53,53,-59,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-77,-75,-79,53,-78,-80,-76,53,-64,53,-105,53,53,-111,-108,-110,-106,-107,-101,-112,-109,53,53,-56,-57,53,53,53,53,53,-100,-113,53,-121,-102,-122,-123,53,53,53,53,-125,-124,-118,53,-116,53,53,53,-117,53,-120,-119,]),'EQUALS':([8,12,17,18,22,40,41,42,43,45,46,47,55,62,70,73,77,82,85,86,87,92,106,107,109,128,169,170,172,],[-17,-27,-22,-18,39,-63,-49,-66,-67,-65,-68,-51,-55,-62,-23,39,114,-58,-59,-54,-52,-53,-24,-26,-25,-64,-56,-57,-50,]),'TIMES':([0,2,3,4,5,7,9,10,11,12,13,14,15,24,25,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,61,62,64,71,72,74,76,77,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,147,150,151,152,153,154,155,156,162,164,167,169,170,171,172,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[9,-2,-12,9,9,-13,9,9,-4,-27,-5,-14,-15,-3,54,9,-10,-8,-11,9,-16,54,-63,-49,-66,-67,-84,-65,-68,-51,-83,54,-35,-85,54,-82,-55,54,54,98,-81,-62,9,-126,-7,-9,-6,-49,54,98,-58,54,54,-59,-54,-52,54,-53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-77,-75,-79,54,-78,-80,-76,54,-64,54,98,98,98,-37,98,-36,98,98,98,98,98,98,-38,-105,54,54,-111,-108,-110,-106,-107,-101,-112,-109,54,54,-56,-57,54,-50,54,54,54,54,-100,-113,54,-121,-102,-122,-123,54,54,54,54,-125,-124,-118,54,-116,54,54,54,-117,54,-120,-119,]),'PLUSEQUALS':([12,40,41,42,43,45,46,47,55,62,77,82,85,86,87,92,128,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-55,-62,115,-58,-59,-54,-52,-53,-64,-56,-57,-50,]),'GE':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,97,-62,-49,97,-58,-59,-54,-52,-53,-64,97,97,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'LPAREN':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,17,18,24,25,27,28,29,32,33,34,35,36,37,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,61,62,64,70,71,72,74,76,80,82,83,84,85,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,112,113,114,115,116,117,118,119,127,128,129,144,145,146,147,148,149,150,151,152,153,154,155,156,158,161,162,164,167,169,170,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[10,10,-2,-12,10,10,-13,26,-126,10,-4,-27,-5,-14,-15,-22,26,-3,56,-21,-19,-20,10,-10,-8,-11,10,-16,56,-63,-66,-67,-84,-65,-68,84,-83,56,-85,88,-82,-55,56,88,-81,-62,10,-23,-126,-7,-9,-6,56,-58,56,56,-59,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-24,-26,-25,56,-77,-75,-79,56,-78,-80,-76,56,-64,56,-105,56,176,56,178,179,-111,-108,-110,-106,-107,-101,-112,180,183,-109,56,56,-56,-57,56,56,56,56,56,-100,-113,56,-121,-102,-122,-123,56,56,56,56,-125,-124,-118,56,-116,56,56,56,-117,56,-120,-119,]),'MINUSMINUS':([12,25,33,34,35,37,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,61,62,71,74,80,82,83,84,85,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,128,129,144,145,147,150,151,152,153,154,155,156,162,164,167,169,170,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[-27,57,-10,-8,-11,-16,57,-63,-66,-67,-84,-65,-68,85,-83,57,-85,57,-82,-55,57,57,-81,-62,-126,-9,57,-58,57,57,-59,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-77,-75,-79,57,-78,-80,-76,57,-64,57,-105,57,57,-111,-108,-110,-106,-107,-101,-112,-109,57,57,-56,-57,57,57,57,57,57,-100,-113,57,-121,-102,-122,-123,57,57,57,57,-125,-124,-118,57,-116,57,57,57,-117,57,-120,-119,]),'ELSE':([144,150,151,152,153,154,156,162,181,182,184,189,191,203,204,205,208,214,216,217,],[-105,-111,-108,-110,-106,-107,-112,-109,-100,-113,-121,-122,-123,-125,-124,-118,211,-117,-120,-119,]),'EQ':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,102,-62,-49,102,-58,-59,-54,-52,-53,-64,102,102,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'ID':([0,1,2,3,4,5,7,9,10,11,12,13,14,15,24,25,26,27,28,29,32,33,34,35,36,37,39,44,48,49,52,53,54,56,57,61,64,67,68,71,72,74,76,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,111,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[12,12,-2,-12,12,12,-13,-126,12,-4,-27,-5,-14,-15,-3,12,12,-21,-19,-20,12,-10,-8,-11,12,-16,12,-84,-83,12,-85,12,-82,12,12,-81,12,-30,12,-126,-7,-9,-6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-31,12,-77,-75,-79,12,-78,-80,-76,12,12,-105,12,12,-111,-108,-110,-106,-107,-101,-112,-109,12,12,12,12,12,12,12,-100,-113,12,-121,-102,-122,-123,12,12,12,12,-125,-124,-118,12,-116,12,12,12,-117,12,-120,-119,]),'IF':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,161,-105,-111,-108,-110,-106,-107,-101,-112,-109,161,-100,-113,-121,-102,-122,-123,161,161,-125,-124,-118,-116,161,161,-117,161,-120,-119,]),'AND':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,93,-62,-49,93,-58,-59,-54,-52,-53,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'CHAR':([0,2,5,8,11,12,13,16,17,18,22,24,26,33,34,37,56,70,71,72,74,76,106,107,109,110,180,181,],[7,-2,7,-17,-4,-27,-5,7,-22,-18,7,-3,7,7,-8,-16,7,-23,7,-7,-9,-6,-24,-26,-25,7,7,-100,]),'LBRACE':([8,12,16,17,18,22,31,33,34,35,37,38,39,70,71,74,80,106,107,109,112,144,150,151,152,153,154,155,156,162,164,167,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-17,-27,-126,-22,-18,-126,71,-10,-8,-11,-16,71,80,-23,-126,-9,80,-24,-26,-25,71,-105,-111,-108,-110,-106,-107,-101,-112,-109,71,80,-100,-113,-121,-102,-122,-123,71,71,-125,-124,-118,-116,71,71,-117,71,-120,-119,]),'INT':([0,2,5,8,11,12,13,16,17,18,22,24,26,33,34,37,56,70,71,72,74,76,106,107,109,110,180,181,],[14,-2,14,-17,-4,-27,-5,14,-22,-18,14,-3,14,14,-8,-16,14,-23,14,-7,-9,-6,-24,-26,-25,14,14,-100,]),'FLOAT':([0,2,5,8,11,12,13,16,17,18,22,24,26,33,34,37,56,70,71,72,74,76,106,107,109,110,180,181,],[15,-2,15,-17,-4,-27,-5,15,-22,-18,15,-3,15,15,-8,-16,15,-23,15,-7,-9,-6,-24,-26,-25,15,15,-100,]),'WHILE':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,149,-105,-111,-108,-110,-106,-107,-101,-112,-109,149,-100,-113,-121,-102,-122,-123,149,149,-125,-124,-118,-116,149,149,-117,149,-120,-119,]),'BREAK':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,163,-105,-111,-108,-110,-106,-107,-101,-112,-109,163,-100,-113,-121,-102,-122,-123,163,163,-125,-124,-118,-116,163,163,-117,163,-120,-119,]),'ADDRESS':([25,33,34,35,37,39,44,48,49,52,53,54,56,57,61,71,74,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,127,129,144,145,147,150,151,152,153,154,155,156,162,164,167,171,176,178,179,180,181,182,183,184,185,189,191,195,199,200,202,203,204,205,207,208,209,211,213,214,215,216,217,],[61,-10,-8,-11,-16,61,-84,-83,61,-85,61,-82,61,61,-81,-126,-9,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-77,-75,-79,61,-78,-80,-76,61,61,-105,61,61,-111,-108,-110,-106,-107,-101,-112,-109,61,61,61,61,61,61,61,-100,-113,61,-121,-102,-122,-123,61,61,61,61,-125,-124,-118,61,-116,61,61,61,-117,61,-120,-119,]),'MINUSEQUALS':([12,40,41,42,43,45,46,47,55,62,77,82,85,86,87,92,128,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-55,-62,118,-58,-59,-54,-52,-53,-64,-56,-57,-50,]),'RBRACKET':([12,25,40,41,42,43,45,46,47,50,51,55,58,59,60,62,77,81,82,85,86,87,89,92,122,128,130,131,132,133,134,135,136,137,138,139,140,141,142,166,169,170,172,173,],[-27,-126,-63,-49,-66,-67,-65,-68,-51,-35,-28,-55,-34,106,-29,-62,-49,-73,-58,-59,-54,-52,-69,-53,169,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-74,-56,-57,-50,-70,]),'OR':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,94,-62,-49,94,-58,-59,-54,-52,-53,-64,-47,-48,-42,-37,-44,-36,-41,-43,-39,-45,-40,-46,-38,-56,-57,-50,]),'ASSERT':([33,34,35,37,71,74,112,144,150,151,152,153,154,155,156,162,164,181,182,184,185,189,191,199,202,203,204,205,208,211,213,214,215,216,217,],[-10,-8,-11,-16,-126,-9,147,-105,-111,-108,-110,-106,-107,-101,-112,-109,147,-100,-113,-121,-102,-122,-123,147,147,-125,-124,-118,-116,147,147,-117,147,-120,-119,]),'MOD':([12,40,41,42,43,45,46,47,50,55,58,62,77,81,82,85,86,87,92,128,130,131,132,133,134,135,136,137,138,139,140,141,142,169,170,172,],[-27,-63,-49,-66,-67,-65,-68,-51,-35,-55,105,-62,-49,105,-58,-59,-54,-52,-53,-64,105,105,105,-37,105,-36,105,105,105,105,105,105,-38,-56,-57,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([112,164,199,202,211,213,215,],[144,144,144,144,144,144,144,]),'identifier_list_opt':([26,],[63,]),'pointer_opt':([0,4,5,9,10,32,36,64,],[1,1,1,27,1,1,1,1,]),'constant':([25,39,49,53,56,57,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'unary_expression':([25,39,49,53,56,57,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[41,77,41,87,77,92,77,77,77,77,41,41,41,41,41,41,41,41,41,41,41,41,41,77,77,41,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'initializer':([39,80,167,],[78,120,186,]),'init_declarator_list':([4,32,],[19,19,]),'init_declarator_list_opt':([4,32,],[20,20,]),'print_statement':([112,164,199,202,211,213,215,],[150,150,150,150,150,150,150,]),'pointer':([9,],[28,]),'argument_expression':([84,176,],[126,190,]),'type_specifier':([0,5,16,22,26,33,56,71,110,180,],[4,4,32,32,64,32,90,32,64,32,]),'assert_statement':([112,164,199,202,211,213,215,],[152,152,152,152,152,152,152,]),'compound_statement':([31,38,112,164,199,202,211,213,215,],[72,76,153,153,153,153,153,153,153,]),'iteration_statement':([112,164,199,202,211,213,215,],[151,151,151,151,151,151,151,]),'selection_statement':([112,164,199,202,211,213,215,],[154,154,154,154,154,154,154,]),'argument_expression_opt':([84,],[124,]),'postfix_expression':([25,39,49,53,56,57,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'global_declaration_list':([0,],[5,]),'program':([0,],[6,]),'statement':([112,164,199,202,211,213,215,],[155,185,205,208,214,216,217,]),'read_statement':([112,164,199,202,211,213,215,],[156,156,156,156,156,156,156,]),'cast_expression':([25,39,49,56,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[50,50,86,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,172,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'initializer_list':([80,],[121,]),'empty':([4,9,16,22,25,26,32,71,84,112,145,164,178,180,195,199,200,202,207,209,211,213,215,],[21,29,35,35,60,69,21,35,125,157,174,174,174,174,174,174,174,174,174,174,174,174,174,]),'assignment_operator':([77,],[116,]),'assignment_expression':([39,56,80,83,84,88,112,116,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[79,89,79,89,123,89,89,166,173,89,89,89,79,188,123,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'parameter_declaration':([26,110,],[66,143,]),'direct_declarator':([0,1,4,5,10,32,36,64,],[8,18,8,8,8,8,8,8,]),'init_declarator':([4,32,36,],[23,23,75,]),'statement_list_opt':([112,],[159,]),'expression_opt':([112,145,164,178,180,195,199,200,202,207,209,211,213,215,],[160,175,160,192,194,201,160,206,160,210,212,160,160,160,]),'constant_expression':([25,],[51,]),'primary_expression':([25,39,49,53,56,57,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'global_declaration':([0,5,],[2,24,]),'declaration':([0,5,16,22,33,71,180,],[11,11,34,34,74,34,195,]),'identifier_list':([26,],[68,]),'jump_statement':([112,164,199,202,211,213,215,],[162,162,162,162,162,162,162,]),'declaration_list_opt':([16,22,71,],[31,38,112,]),'function_definition':([0,5,],[13,13,]),'binary_expression':([25,39,56,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[58,81,81,81,81,81,81,130,131,132,133,134,135,136,137,138,139,140,141,142,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'parameter_list':([26,],[65,]),'constant_expression_opt':([25,],[59,]),'declaration_list':([16,22,71,],[33,33,33,]),'unary_operator':([25,39,49,53,56,57,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'declarator':([0,4,5,10,32,36,64,],[16,22,16,30,73,73,108,]),'statement_list':([112,],[164,]),'identifier':([0,1,4,5,10,25,26,32,36,39,49,53,56,57,64,68,80,83,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,112,116,127,129,145,147,164,167,171,176,178,179,180,183,195,199,200,202,207,209,211,213,215,],[17,17,17,17,17,62,67,17,17,62,62,62,62,62,17,111,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'expression':([56,83,88,112,145,147,164,178,179,180,183,195,199,200,202,207,209,211,213,215,],[91,122,91,165,165,177,165,165,193,165,196,165,165,165,165,165,165,165,165,165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',64),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',71),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',72),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_0','uc_parser.py',80),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_1','uc_parser.py',85),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition','uc_parser.py',90),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition','uc_parser.py',91),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',99),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',100),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',108),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',109),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',114),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',115),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',116),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',117),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','uc_parser.py',122),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','uc_parser.py',132),
  ('declarator -> pointer_opt direct_declarator','declarator',2,'p_declarator','uc_parser.py',133),
  ('pointer_opt -> TIMES pointer','pointer_opt',2,'p_pointer_opt','uc_parser.py',144),
  ('pointer_opt -> TIMES empty','pointer_opt',2,'p_pointer_opt','uc_parser.py',145),
  ('pointer -> pointer_opt','pointer',1,'p_pointer','uc_parser.py',150),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator','uc_parser.py',155),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','uc_parser.py',156),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator','uc_parser.py',157),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',158),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',159),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',171),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',176),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',177),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',182),
  ('identifier_list -> identifier_list identifier','identifier_list',2,'p_identifier_list','uc_parser.py',183),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',191),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',192),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',197),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',202),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',203),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',204),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',205),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',206),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',207),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',208),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',209),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',210),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',211),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',212),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',213),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',214),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',215),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','uc_parser.py',223),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','uc_parser.py',224),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','uc_parser.py',232),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',233),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',234),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','uc_parser.py',235),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','uc_parser.py',243),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','uc_parser.py',244),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression','uc_parser.py',245),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression','uc_parser.py',246),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression','uc_parser.py',247),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',259),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',260),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',265),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',266),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','uc_parser.py',267),
  ('constant -> INT_CONST','constant',1,'p_constant','uc_parser.py',275),
  ('constant -> CHAR_CONST','constant',1,'p_constant','uc_parser.py',276),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','uc_parser.py',277),
  ('constant -> STR_CONST','constant',1,'p_constant','uc_parser.py',278),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',283),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',284),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',292),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',293),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',301),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',302),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',310),
  ('assignment_operator -> TIMESEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',311),
  ('assignment_operator -> DIVIDEEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',312),
  ('assignment_operator -> MODEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',313),
  ('assignment_operator -> PLUSEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',314),
  ('assignment_operator -> MINUSEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',315),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',320),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',321),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',322),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',323),
  ('unary_operator -> EXMARK','unary_operator',1,'p_unary_operator','uc_parser.py',324),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',329),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',330),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',338),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',344),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',345),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',350),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',351),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',360),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',361),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','uc_parser.py',369),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','uc_parser.py',370),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','uc_parser.py',371),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',379),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',380),
  ('compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE','compound_statement',4,'p_compound_statement','uc_parser.py',388),
  ('statement_list -> statement','statement_list',1,'p_statement_list','uc_parser.py',393),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','uc_parser.py',394),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','uc_parser.py',402),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','uc_parser.py',403),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',408),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',409),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',410),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',411),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',412),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',413),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',414),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',415),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',420),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',425),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',426),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser.py',431),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser.py',432),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','uc_parser.py',440),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser.py',441),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','uc_parser.py',442),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','uc_parser.py',452),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','uc_parser.py',453),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',461),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',466),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',471),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',476),
]

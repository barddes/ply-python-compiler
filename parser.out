Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> declaration
Rule 5     global_declaration -> function_definition
Rule 6     function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 7     function_definition -> declarator declaration_list_opt compound_statement
Rule 8     declaration_list -> declaration
Rule 9     declaration_list -> declaration_list declaration
Rule 10    declaration_list_opt -> declaration_list
Rule 11    declaration_list_opt -> empty
Rule 12    type_specifier -> VOID
Rule 13    type_specifier -> CHAR
Rule 14    type_specifier -> INT
Rule 15    type_specifier -> FLOAT
Rule 16    declaration -> type_specifier init_declarator_list_opt SEMI
Rule 17    declarator -> direct_declarator
Rule 18    declarator -> pointer_opt direct_declarator
Rule 19    pointer_opt -> TIMES pointer
Rule 20    pointer_opt -> TIMES empty
Rule 21    pointer -> pointer_opt
Rule 22    direct_declarator -> identifier
Rule 23    direct_declarator -> LPAREN declarator RPAREN
Rule 24    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 25    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 26    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 27    identifier -> ID
Rule 28    constant_expression_opt -> constant_expression
Rule 29    constant_expression_opt -> empty
Rule 30    identifier_list -> identifier
Rule 31    identifier_list -> identifier_list identifier
Rule 32    identifier_list_opt -> identifier_list
Rule 33    identifier_list_opt -> empty
Rule 34    constant_expression -> binary_expression
Rule 35    binary_expression -> cast_expression
Rule 36    binary_expression -> binary_expression TIMES binary_expression
Rule 37    binary_expression -> binary_expression DIVIDE binary_expression
Rule 38    binary_expression -> binary_expression MOD binary_expression
Rule 39    binary_expression -> binary_expression PLUS binary_expression
Rule 40    binary_expression -> binary_expression MINUS binary_expression
Rule 41    binary_expression -> binary_expression LT binary_expression
Rule 42    binary_expression -> binary_expression LE binary_expression
Rule 43    binary_expression -> binary_expression GT binary_expression
Rule 44    binary_expression -> binary_expression GE binary_expression
Rule 45    binary_expression -> binary_expression EQ binary_expression
Rule 46    binary_expression -> binary_expression NE binary_expression
Rule 47    binary_expression -> binary_expression AND binary_expression
Rule 48    binary_expression -> binary_expression OR binary_expression
Rule 49    cast_expression -> unary_expression
Rule 50    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 51    unary_expression -> postfix_expression
Rule 52    unary_expression -> PLUSPLUS unary_expression
Rule 53    unary_expression -> MINUSMINUS unary_expression
Rule 54    unary_expression -> unary_operator cast_expression
Rule 55    postfix_expression -> primary_expression
Rule 56    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 57    postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN
Rule 58    postfix_expression -> postfix_expression PLUSPLUS
Rule 59    postfix_expression -> postfix_expression MINUSMINUS
Rule 60    argument_expression_opt -> argument_expression
Rule 61    argument_expression_opt -> empty
Rule 62    primary_expression -> identifier
Rule 63    primary_expression -> constant
Rule 64    primary_expression -> LPAREN expression RPAREN
Rule 65    constant -> INT_CONST
Rule 66    constant -> FLOAT_CONST
Rule 67    constant -> STR_CONST
Rule 68    constant -> CHAR_CONST
Rule 69    expression -> assignment_expression
Rule 70    expression -> expression COMMA assignment_expression
Rule 71    argument_expression -> assignment_expression
Rule 72    argument_expression -> argument_expression COMMA assignment_expression
Rule 73    assignment_expression -> binary_expression
Rule 74    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 75    assignment_operator -> EQUALS
Rule 76    assignment_operator -> TIMESEQUALS
Rule 77    assignment_operator -> DIVIDEEQUALS
Rule 78    assignment_operator -> MODEQUALS
Rule 79    assignment_operator -> PLUSEQUALS
Rule 80    assignment_operator -> MINUSEQUALS
Rule 81    unary_operator -> ADDRESS
Rule 82    unary_operator -> TIMES
Rule 83    unary_operator -> PLUS
Rule 84    unary_operator -> MINUS
Rule 85    unary_operator -> EXMARK
Rule 86    parameter_list -> parameter_declaration
Rule 87    parameter_list -> parameter_list COMMA parameter_declaration
Rule 88    parameter_declaration -> type_specifier declarator
Rule 89    init_declarator_list_opt -> init_declarator_list
Rule 90    init_declarator_list_opt -> empty
Rule 91    init_declarator_list -> init_declarator
Rule 92    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 93    init_declarator -> declarator
Rule 94    init_declarator -> declarator EQUALS initializer
Rule 95    initializer -> assignment_expression
Rule 96    initializer -> LBRACE initializer_list RBRACE
Rule 97    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 98    initializer_list -> initializer
Rule 99    initializer_list -> initializer_list COMMA initializer
Rule 100   compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE
Rule 101   statement_list -> statement
Rule 102   statement_list -> statement_list statement
Rule 103   statement_list_opt -> statement_list
Rule 104   statement_list_opt -> empty
Rule 105   statement -> expression_statement
Rule 106   statement -> compound_statement
Rule 107   statement -> selection_statement
Rule 108   statement -> iteration_statement
Rule 109   statement -> jump_statement
Rule 110   statement -> assert_statement
Rule 111   statement -> print_statement
Rule 112   statement -> read_statement
Rule 113   expression_statement -> expression_opt SEMI
Rule 114   expression_opt -> expression
Rule 115   expression_opt -> empty
Rule 116   selection_statement -> IF LPAREN expression RPAREN statement
Rule 117   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 118   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 119   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 120   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 121   jump_statement -> BREAK SEMI
Rule 122   jump_statement -> RETURN expression_opt SEMI
Rule 123   assert_statement -> ASSERT expression SEMI
Rule 124   print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 125   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 126   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 81
AND                  : 47
ASSERT               : 123
BREAK                : 121
CHAR                 : 13
CHAR_CONST           : 68
COMMA                : 70 72 87 92 97 99
DIVIDE               : 37
DIVIDEEQUALS         : 77
ELSE                 : 117
EQ                   : 45
EQUALS               : 75 94
EXMARK               : 85
FLOAT                : 15
FLOAT_CONST          : 66
FOR                  : 119 120
GE                   : 44
GT                   : 43
ID                   : 27
IF                   : 116 117
INT                  : 14
INT_CONST            : 65
LBRACE               : 96 97 100
LBRACKET             : 24 56
LE                   : 42
LPAREN               : 23 25 26 50 57 64 116 117 118 119 120 124 125
LT                   : 41
MINUS                : 40 84
MINUSEQUALS          : 80
MINUSMINUS           : 53 59
MOD                  : 38
MODEQUALS            : 78
NE                   : 46
OR                   : 48
PLUS                 : 39 83
PLUSEQUALS           : 79
PLUSPLUS             : 52 58
PRINT                : 124
RBRACE               : 96 97 100
RBRACKET             : 24 56
READ                 : 125
RETURN               : 122
RPAREN               : 23 25 26 50 57 64 116 117 118 119 120 124 125
SEMI                 : 16 113 119 119 120 121 122 123 124 125
STR_CONST            : 67
TIMES                : 19 20 36 82
TIMESEQUALS          : 76
VOID                 : 12
WHILE                : 118
error                : 

Nonterminals, with rules where they appear

argument_expression  : 60 72 125
argument_expression_opt : 57
assert_statement     : 110
assignment_expression : 69 70 71 72 74 95
assignment_operator  : 74
binary_expression    : 34 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 73
cast_expression      : 35 50 54
compound_statement   : 6 7 106
constant             : 63
constant_expression  : 28
constant_expression_opt : 24
declaration          : 4 8 9 120
declaration_list     : 9 10
declaration_list_opt : 6 7 100
declarator           : 6 7 23 88 93 94
direct_declarator    : 17 18 24 25 26
empty                : 11 20 29 33 61 90 104 115
expression           : 56 64 70 114 116 117 118 123
expression_opt       : 113 119 119 119 120 120 122 124
expression_statement : 105
function_definition  : 5
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 22 30 31 62
identifier_list      : 31 32
identifier_list_opt  : 26
init_declarator      : 91 92
init_declarator_list : 89 92
init_declarator_list_opt : 16
initializer          : 94 98 99
initializer_list     : 96 97 99
iteration_statement  : 108
jump_statement       : 109
parameter_declaration : 86 87
parameter_list       : 25 87
pointer              : 19
pointer_opt          : 18 21
postfix_expression   : 51 56 57 58 59
primary_expression   : 55
print_statement      : 111
program              : 0
read_statement       : 112
selection_statement  : 107
statement            : 101 102 116 117 117 118 119 120
statement_list       : 102 103
statement_list_opt   : 100
type_specifier       : 6 16 50 88
unary_expression     : 49 52 53 74
unary_operator       : 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (27) identifier -> . ID

    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    identifier                     shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (27) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    global_declaration             shift and go to state 18
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    identifier                     shift and go to state 14

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> declaration .

    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    FLOAT           reduce using rule 4 (global_declaration -> declaration .)
    LPAREN          reduce using rule 4 (global_declaration -> declaration .)
    TIMES           reduce using rule 4 (global_declaration -> declaration .)
    ID              reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 5 (global_declaration -> function_definition .)
    TIMES           reduce using rule 5 (global_declaration -> function_definition .)
    ID              reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 6

    (16) declaration -> type_specifier . init_declarator_list_opt SEMI
    (6) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (89) init_declarator_list_opt -> . init_declarator_list
    (90) init_declarator_list_opt -> . empty
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (91) init_declarator_list -> . init_declarator
    (92) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (126) empty -> .
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (27) identifier -> . ID

    SEMI            reduce using rule 126 (empty -> .)
    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    init_declarator_list_opt       shift and go to state 19
    declarator                     shift and go to state 20
    init_declarator_list           shift and go to state 21
    empty                          shift and go to state 22
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    init_declarator                shift and go to state 23
    identifier                     shift and go to state 14

state 7

    (7) function_definition -> declarator . declaration_list_opt compound_statement
    (10) declaration_list_opt -> . declaration_list
    (11) declaration_list_opt -> . empty
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (126) empty -> .
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT

    LBRACE          reduce using rule 126 (empty -> .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    declaration_list_opt           shift and go to state 24
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27
    type_specifier                 shift and go to state 28

state 8

    (12) type_specifier -> VOID .

    LPAREN          reduce using rule 12 (type_specifier -> VOID .)
    TIMES           reduce using rule 12 (type_specifier -> VOID .)
    ID              reduce using rule 12 (type_specifier -> VOID .)
    SEMI            reduce using rule 12 (type_specifier -> VOID .)
    RPAREN          reduce using rule 12 (type_specifier -> VOID .)


state 9

    (13) type_specifier -> CHAR .

    LPAREN          reduce using rule 13 (type_specifier -> CHAR .)
    TIMES           reduce using rule 13 (type_specifier -> CHAR .)
    ID              reduce using rule 13 (type_specifier -> CHAR .)
    SEMI            reduce using rule 13 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 13 (type_specifier -> CHAR .)


state 10

    (14) type_specifier -> INT .

    LPAREN          reduce using rule 14 (type_specifier -> INT .)
    TIMES           reduce using rule 14 (type_specifier -> INT .)
    ID              reduce using rule 14 (type_specifier -> INT .)
    SEMI            reduce using rule 14 (type_specifier -> INT .)
    RPAREN          reduce using rule 14 (type_specifier -> INT .)


state 11

    (15) type_specifier -> FLOAT .

    LPAREN          reduce using rule 15 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 15 (type_specifier -> FLOAT .)
    ID              reduce using rule 15 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 15 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 15 (type_specifier -> FLOAT .)


state 12

    (17) declarator -> direct_declarator .
    (24) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (26) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 17 (declarator -> direct_declarator .)
    CHAR            reduce using rule 17 (declarator -> direct_declarator .)
    INT             reduce using rule 17 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 17 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 17 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 17 (declarator -> direct_declarator .)
    COMMA           reduce using rule 17 (declarator -> direct_declarator .)
    SEMI            reduce using rule 17 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 17 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 29
    LPAREN          shift and go to state 30


state 13

    (18) declarator -> pointer_opt . direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (27) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 17

    direct_declarator              shift and go to state 31
    identifier                     shift and go to state 14

state 14

    (22) direct_declarator -> identifier .

    LBRACKET        reduce using rule 22 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 22 (direct_declarator -> identifier .)
    VOID            reduce using rule 22 (direct_declarator -> identifier .)
    CHAR            reduce using rule 22 (direct_declarator -> identifier .)
    INT             reduce using rule 22 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 22 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 22 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 22 (direct_declarator -> identifier .)
    COMMA           reduce using rule 22 (direct_declarator -> identifier .)
    SEMI            reduce using rule 22 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 22 (direct_declarator -> identifier .)


state 15

    (23) direct_declarator -> LPAREN . declarator RPAREN
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (27) identifier -> . ID

    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    declarator                     shift and go to state 32
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    identifier                     shift and go to state 14

state 16

    (19) pointer_opt -> TIMES . pointer
    (20) pointer_opt -> TIMES . empty
    (21) pointer -> . pointer_opt
    (126) empty -> .
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty

    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    TIMES           shift and go to state 16

    pointer                        shift and go to state 33
    empty                          shift and go to state 34
    pointer_opt                    shift and go to state 35

state 17

    (27) identifier -> ID .

    LBRACKET        reduce using rule 27 (identifier -> ID .)
    LPAREN          reduce using rule 27 (identifier -> ID .)
    VOID            reduce using rule 27 (identifier -> ID .)
    CHAR            reduce using rule 27 (identifier -> ID .)
    INT             reduce using rule 27 (identifier -> ID .)
    FLOAT           reduce using rule 27 (identifier -> ID .)
    LBRACE          reduce using rule 27 (identifier -> ID .)
    EQUALS          reduce using rule 27 (identifier -> ID .)
    COMMA           reduce using rule 27 (identifier -> ID .)
    SEMI            reduce using rule 27 (identifier -> ID .)
    RPAREN          reduce using rule 27 (identifier -> ID .)
    PLUSPLUS        reduce using rule 27 (identifier -> ID .)
    MINUSMINUS      reduce using rule 27 (identifier -> ID .)
    TIMES           reduce using rule 27 (identifier -> ID .)
    DIVIDE          reduce using rule 27 (identifier -> ID .)
    MOD             reduce using rule 27 (identifier -> ID .)
    PLUS            reduce using rule 27 (identifier -> ID .)
    MINUS           reduce using rule 27 (identifier -> ID .)
    LT              reduce using rule 27 (identifier -> ID .)
    LE              reduce using rule 27 (identifier -> ID .)
    GT              reduce using rule 27 (identifier -> ID .)
    GE              reduce using rule 27 (identifier -> ID .)
    EQ              reduce using rule 27 (identifier -> ID .)
    NE              reduce using rule 27 (identifier -> ID .)
    AND             reduce using rule 27 (identifier -> ID .)
    OR              reduce using rule 27 (identifier -> ID .)
    RBRACKET        reduce using rule 27 (identifier -> ID .)
    ID              reduce using rule 27 (identifier -> ID .)
    TIMESEQUALS     reduce using rule 27 (identifier -> ID .)
    DIVIDEEQUALS    reduce using rule 27 (identifier -> ID .)
    MODEQUALS       reduce using rule 27 (identifier -> ID .)
    PLUSEQUALS      reduce using rule 27 (identifier -> ID .)
    MINUSEQUALS     reduce using rule 27 (identifier -> ID .)
    RBRACE          reduce using rule 27 (identifier -> ID .)


state 18

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 19

    (16) declaration -> type_specifier init_declarator_list_opt . SEMI

    SEMI            shift and go to state 36


state 20

    (6) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (93) init_declarator -> declarator .
    (94) init_declarator -> declarator . EQUALS initializer
    (10) declaration_list_opt -> . declaration_list
    (11) declaration_list_opt -> . empty
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (126) empty -> .
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT

    COMMA           reduce using rule 93 (init_declarator -> declarator .)
    SEMI            reduce using rule 93 (init_declarator -> declarator .)
    EQUALS          shift and go to state 38
    LBRACE          reduce using rule 126 (empty -> .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type_specifier                 shift and go to state 28
    declaration_list_opt           shift and go to state 37
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27

state 21

    (89) init_declarator_list_opt -> init_declarator_list .
    (92) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 89 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 39


state 22

    (90) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 90 (init_declarator_list_opt -> empty .)


state 23

    (91) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 91 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 91 (init_declarator_list -> init_declarator .)


state 24

    (7) function_definition -> declarator declaration_list_opt . compound_statement
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE

    LBRACE          shift and go to state 41

    compound_statement             shift and go to state 40

state 25

    (10) declaration_list_opt -> declaration_list .
    (9) declaration_list -> declaration_list . declaration
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT

    LBRACE          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 10 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ASSERT          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    PRINT           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    READ            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    PLUSPLUS        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    MINUSMINUS      reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LPAREN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ADDRESS         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    TIMES           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    PLUS            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXMARK          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    INT_CONST       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FLOAT_CONST     reduce using rule 10 (declaration_list_opt -> declaration_list .)
    STR_CONST       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CHAR_CONST      reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RBRACE          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    SEMI            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    declaration                    shift and go to state 42
    type_specifier                 shift and go to state 28

state 26

    (11) declaration_list_opt -> empty .

    LBRACE          reduce using rule 11 (declaration_list_opt -> empty .)
    IF              reduce using rule 11 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 11 (declaration_list_opt -> empty .)
    FOR             reduce using rule 11 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 11 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 11 (declaration_list_opt -> empty .)
    ASSERT          reduce using rule 11 (declaration_list_opt -> empty .)
    PRINT           reduce using rule 11 (declaration_list_opt -> empty .)
    READ            reduce using rule 11 (declaration_list_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (declaration_list_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 11 (declaration_list_opt -> empty .)
    ADDRESS         reduce using rule 11 (declaration_list_opt -> empty .)
    TIMES           reduce using rule 11 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 11 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 11 (declaration_list_opt -> empty .)
    EXMARK          reduce using rule 11 (declaration_list_opt -> empty .)
    ID              reduce using rule 11 (declaration_list_opt -> empty .)
    INT_CONST       reduce using rule 11 (declaration_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (declaration_list_opt -> empty .)
    STR_CONST       reduce using rule 11 (declaration_list_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (declaration_list_opt -> empty .)
    RBRACE          reduce using rule 11 (declaration_list_opt -> empty .)
    SEMI            reduce using rule 11 (declaration_list_opt -> empty .)


state 27

    (8) declaration_list -> declaration .

    VOID            reduce using rule 8 (declaration_list -> declaration .)
    CHAR            reduce using rule 8 (declaration_list -> declaration .)
    INT             reduce using rule 8 (declaration_list -> declaration .)
    FLOAT           reduce using rule 8 (declaration_list -> declaration .)
    LBRACE          reduce using rule 8 (declaration_list -> declaration .)
    IF              reduce using rule 8 (declaration_list -> declaration .)
    WHILE           reduce using rule 8 (declaration_list -> declaration .)
    FOR             reduce using rule 8 (declaration_list -> declaration .)
    BREAK           reduce using rule 8 (declaration_list -> declaration .)
    RETURN          reduce using rule 8 (declaration_list -> declaration .)
    ASSERT          reduce using rule 8 (declaration_list -> declaration .)
    PRINT           reduce using rule 8 (declaration_list -> declaration .)
    READ            reduce using rule 8 (declaration_list -> declaration .)
    PLUSPLUS        reduce using rule 8 (declaration_list -> declaration .)
    MINUSMINUS      reduce using rule 8 (declaration_list -> declaration .)
    LPAREN          reduce using rule 8 (declaration_list -> declaration .)
    ADDRESS         reduce using rule 8 (declaration_list -> declaration .)
    TIMES           reduce using rule 8 (declaration_list -> declaration .)
    PLUS            reduce using rule 8 (declaration_list -> declaration .)
    MINUS           reduce using rule 8 (declaration_list -> declaration .)
    EXMARK          reduce using rule 8 (declaration_list -> declaration .)
    ID              reduce using rule 8 (declaration_list -> declaration .)
    INT_CONST       reduce using rule 8 (declaration_list -> declaration .)
    FLOAT_CONST     reduce using rule 8 (declaration_list -> declaration .)
    STR_CONST       reduce using rule 8 (declaration_list -> declaration .)
    CHAR_CONST      reduce using rule 8 (declaration_list -> declaration .)
    RBRACE          reduce using rule 8 (declaration_list -> declaration .)
    SEMI            reduce using rule 8 (declaration_list -> declaration .)


state 28

    (16) declaration -> type_specifier . init_declarator_list_opt SEMI
    (89) init_declarator_list_opt -> . init_declarator_list
    (90) init_declarator_list_opt -> . empty
    (91) init_declarator_list -> . init_declarator
    (92) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (126) empty -> .
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (27) identifier -> . ID

    SEMI            reduce using rule 126 (empty -> .)
    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    init_declarator_list_opt       shift and go to state 19
    init_declarator_list           shift and go to state 21
    empty                          shift and go to state 22
    init_declarator                shift and go to state 23
    declarator                     shift and go to state 43
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    identifier                     shift and go to state 14

state 29

    (24) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (28) constant_expression_opt -> . constant_expression
    (29) constant_expression_opt -> . empty
    (34) constant_expression -> . binary_expression
    (126) empty -> .
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RBRACKET        reduce using rule 126 (empty -> .)
    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    constant_expression_opt        shift and go to state 44
    constant_expression            shift and go to state 45
    empty                          shift and go to state 46
    binary_expression              shift and go to state 47
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 30

    (25) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (26) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (86) parameter_list -> . parameter_declaration
    (87) parameter_list -> . parameter_list COMMA parameter_declaration
    (32) identifier_list_opt -> . identifier_list
    (33) identifier_list_opt -> . empty
    (88) parameter_declaration -> . type_specifier declarator
    (30) identifier_list -> . identifier
    (31) identifier_list -> . identifier_list identifier
    (126) empty -> .
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT
    (27) identifier -> . ID

    RPAREN          reduce using rule 126 (empty -> .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    ID              shift and go to state 17

    parameter_list                 shift and go to state 67
    identifier_list_opt            shift and go to state 68
    parameter_declaration          shift and go to state 69
    identifier_list                shift and go to state 70
    empty                          shift and go to state 71
    type_specifier                 shift and go to state 72
    identifier                     shift and go to state 73

state 31

    (18) declarator -> pointer_opt direct_declarator .
    (24) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (26) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    CHAR            reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    INT             reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    FLOAT           reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    LBRACE          reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    EQUALS          reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    COMMA           reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    SEMI            reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    RPAREN          reduce using rule 18 (declarator -> pointer_opt direct_declarator .)
    LBRACKET        shift and go to state 29
    LPAREN          shift and go to state 30


state 32

    (23) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 74


state 33

    (19) pointer_opt -> TIMES pointer .

    LPAREN          reduce using rule 19 (pointer_opt -> TIMES pointer .)
    ID              reduce using rule 19 (pointer_opt -> TIMES pointer .)


state 34

    (20) pointer_opt -> TIMES empty .

    LPAREN          reduce using rule 20 (pointer_opt -> TIMES empty .)
    ID              reduce using rule 20 (pointer_opt -> TIMES empty .)


state 35

    (21) pointer -> pointer_opt .

    LPAREN          reduce using rule 21 (pointer -> pointer_opt .)
    ID              reduce using rule 21 (pointer -> pointer_opt .)


state 36

    (16) declaration -> type_specifier init_declarator_list_opt SEMI .

    VOID            reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    CHAR            reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INT             reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LPAREN          reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    TIMES           reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ID              reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    $end            reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LBRACE          reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    IF              reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    WHILE           reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FOR             reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    BREAK           reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RETURN          reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ASSERT          reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PRINT           reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    READ            reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PLUSPLUS        reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    MINUSMINUS      reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ADDRESS         reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PLUS            reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    MINUS           reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    EXMARK          reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INT_CONST       reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FLOAT_CONST     reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    STR_CONST       reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    CHAR_CONST      reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RBRACE          reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    SEMI            reduce using rule 16 (declaration -> type_specifier init_declarator_list_opt SEMI .)


state 37

    (6) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE

    LBRACE          shift and go to state 41

    compound_statement             shift and go to state 75

state 38

    (94) init_declarator -> declarator EQUALS . initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    initializer                    shift and go to state 76
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 39

    (92) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (27) identifier -> . ID

    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    init_declarator                shift and go to state 81
    declarator                     shift and go to state 43
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    identifier                     shift and go to state 14

state 40

    (7) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)


state 41

    (100) compound_statement -> LBRACE . declaration_list_opt statement_list_opt RBRACE
    (10) declaration_list_opt -> . declaration_list
    (11) declaration_list_opt -> . empty
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (126) empty -> .
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT

    LBRACE          reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    BREAK           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    ASSERT          reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PLUSPLUS        reduce using rule 126 (empty -> .)
    MINUSMINUS      reduce using rule 126 (empty -> .)
    LPAREN          reduce using rule 126 (empty -> .)
    ADDRESS         reduce using rule 126 (empty -> .)
    TIMES           reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    EXMARK          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    INT_CONST       reduce using rule 126 (empty -> .)
    FLOAT_CONST     reduce using rule 126 (empty -> .)
    STR_CONST       reduce using rule 126 (empty -> .)
    CHAR_CONST      reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)
    SEMI            reduce using rule 126 (empty -> .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    declaration_list_opt           shift and go to state 82
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27
    type_specifier                 shift and go to state 28

state 42

    (9) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 9 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 9 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 9 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    ASSERT          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    PLUSPLUS        reduce using rule 9 (declaration_list -> declaration_list declaration .)
    MINUSMINUS      reduce using rule 9 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    ADDRESS         reduce using rule 9 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    EXMARK          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 9 (declaration_list -> declaration_list declaration .)
    INT_CONST       reduce using rule 9 (declaration_list -> declaration_list declaration .)
    FLOAT_CONST     reduce using rule 9 (declaration_list -> declaration_list declaration .)
    STR_CONST       reduce using rule 9 (declaration_list -> declaration_list declaration .)
    CHAR_CONST      reduce using rule 9 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 9 (declaration_list -> declaration_list declaration .)


state 43

    (93) init_declarator -> declarator .
    (94) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 93 (init_declarator -> declarator .)
    SEMI            reduce using rule 93 (init_declarator -> declarator .)
    EQUALS          shift and go to state 38


state 44

    (24) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 83


state 45

    (28) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 28 (constant_expression_opt -> constant_expression .)


state 46

    (29) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 29 (constant_expression_opt -> empty .)


state 47

    (34) constant_expression -> binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 34 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LT              shift and go to state 89
    LE              shift and go to state 90
    GT              shift and go to state 91
    GE              shift and go to state 92
    EQ              shift and go to state 93
    NE              shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96


state 48

    (35) binary_expression -> cast_expression .

    TIMES           reduce using rule 35 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 35 (binary_expression -> cast_expression .)
    MOD             reduce using rule 35 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 35 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 35 (binary_expression -> cast_expression .)
    LT              reduce using rule 35 (binary_expression -> cast_expression .)
    LE              reduce using rule 35 (binary_expression -> cast_expression .)
    GT              reduce using rule 35 (binary_expression -> cast_expression .)
    GE              reduce using rule 35 (binary_expression -> cast_expression .)
    EQ              reduce using rule 35 (binary_expression -> cast_expression .)
    NE              reduce using rule 35 (binary_expression -> cast_expression .)
    AND             reduce using rule 35 (binary_expression -> cast_expression .)
    OR              reduce using rule 35 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 35 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 35 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 35 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 35 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 35 (binary_expression -> cast_expression .)


state 49

    (82) unary_operator -> TIMES .

    LPAREN          reduce using rule 82 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 82 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 82 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 82 (unary_operator -> TIMES .)
    TIMES           reduce using rule 82 (unary_operator -> TIMES .)
    PLUS            reduce using rule 82 (unary_operator -> TIMES .)
    MINUS           reduce using rule 82 (unary_operator -> TIMES .)
    EXMARK          reduce using rule 82 (unary_operator -> TIMES .)
    ID              reduce using rule 82 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 82 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 82 (unary_operator -> TIMES .)
    STR_CONST       reduce using rule 82 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 82 (unary_operator -> TIMES .)


state 50

    (83) unary_operator -> PLUS .

    LPAREN          reduce using rule 83 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 83 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 83 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 83 (unary_operator -> PLUS .)
    TIMES           reduce using rule 83 (unary_operator -> PLUS .)
    PLUS            reduce using rule 83 (unary_operator -> PLUS .)
    MINUS           reduce using rule 83 (unary_operator -> PLUS .)
    EXMARK          reduce using rule 83 (unary_operator -> PLUS .)
    ID              reduce using rule 83 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 83 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 83 (unary_operator -> PLUS .)
    STR_CONST       reduce using rule 83 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 83 (unary_operator -> PLUS .)


state 51

    (84) unary_operator -> MINUS .

    LPAREN          reduce using rule 84 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 84 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 84 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 84 (unary_operator -> MINUS .)
    TIMES           reduce using rule 84 (unary_operator -> MINUS .)
    PLUS            reduce using rule 84 (unary_operator -> MINUS .)
    MINUS           reduce using rule 84 (unary_operator -> MINUS .)
    EXMARK          reduce using rule 84 (unary_operator -> MINUS .)
    ID              reduce using rule 84 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 84 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 84 (unary_operator -> MINUS .)
    STR_CONST       reduce using rule 84 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 84 (unary_operator -> MINUS .)


state 52

    (49) cast_expression -> unary_expression .

    TIMES           reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> unary_expression .)
    MOD             reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 49 (cast_expression -> unary_expression .)
    LT              reduce using rule 49 (cast_expression -> unary_expression .)
    LE              reduce using rule 49 (cast_expression -> unary_expression .)
    GT              reduce using rule 49 (cast_expression -> unary_expression .)
    GE              reduce using rule 49 (cast_expression -> unary_expression .)
    EQ              reduce using rule 49 (cast_expression -> unary_expression .)
    NE              reduce using rule 49 (cast_expression -> unary_expression .)
    AND             reduce using rule 49 (cast_expression -> unary_expression .)
    OR              reduce using rule 49 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 49 (cast_expression -> unary_expression .)
    TIMESEQUALS     reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDEEQUALS    reduce using rule 49 (cast_expression -> unary_expression .)
    MODEQUALS       reduce using rule 49 (cast_expression -> unary_expression .)
    PLUSEQUALS      reduce using rule 49 (cast_expression -> unary_expression .)
    MINUSEQUALS     reduce using rule 49 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 49 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 49 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 49 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 49 (cast_expression -> unary_expression .)


state 53

    (50) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (64) primary_expression -> LPAREN . expression RPAREN
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    type_specifier                 shift and go to state 97
    cast_expression                shift and go to state 48
    expression                     shift and go to state 98
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 54

    (51) unary_expression -> postfix_expression .
    (56) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (57) postfix_expression -> postfix_expression . LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> postfix_expression . PLUSPLUS
    (59) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 51 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 51 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 51 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 51 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 51 (unary_expression -> postfix_expression .)
    LT              reduce using rule 51 (unary_expression -> postfix_expression .)
    LE              reduce using rule 51 (unary_expression -> postfix_expression .)
    GT              reduce using rule 51 (unary_expression -> postfix_expression .)
    GE              reduce using rule 51 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 51 (unary_expression -> postfix_expression .)
    NE              reduce using rule 51 (unary_expression -> postfix_expression .)
    AND             reduce using rule 51 (unary_expression -> postfix_expression .)
    OR              reduce using rule 51 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 51 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 51 (unary_expression -> postfix_expression .)
    TIMESEQUALS     reduce using rule 51 (unary_expression -> postfix_expression .)
    DIVIDEEQUALS    reduce using rule 51 (unary_expression -> postfix_expression .)
    MODEQUALS       reduce using rule 51 (unary_expression -> postfix_expression .)
    PLUSEQUALS      reduce using rule 51 (unary_expression -> postfix_expression .)
    MINUSEQUALS     reduce using rule 51 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 51 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 51 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 51 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 100
    LPAREN          shift and go to state 101
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 103


state 55

    (52) unary_expression -> PLUSPLUS . unary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    LPAREN          shift and go to state 105
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    unary_expression               shift and go to state 104
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 56

    (53) unary_expression -> MINUSMINUS . unary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    LPAREN          shift and go to state 105
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 57

    (54) unary_expression -> unary_operator . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    unary_operator                 shift and go to state 57
    cast_expression                shift and go to state 107
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 58

    (55) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 55 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 55 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 55 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 55 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 55 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 55 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 55 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 55 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 55 (postfix_expression -> primary_expression .)
    LT              reduce using rule 55 (postfix_expression -> primary_expression .)
    LE              reduce using rule 55 (postfix_expression -> primary_expression .)
    GT              reduce using rule 55 (postfix_expression -> primary_expression .)
    GE              reduce using rule 55 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 55 (postfix_expression -> primary_expression .)
    NE              reduce using rule 55 (postfix_expression -> primary_expression .)
    AND             reduce using rule 55 (postfix_expression -> primary_expression .)
    OR              reduce using rule 55 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 55 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 55 (postfix_expression -> primary_expression .)
    TIMESEQUALS     reduce using rule 55 (postfix_expression -> primary_expression .)
    DIVIDEEQUALS    reduce using rule 55 (postfix_expression -> primary_expression .)
    MODEQUALS       reduce using rule 55 (postfix_expression -> primary_expression .)
    PLUSEQUALS      reduce using rule 55 (postfix_expression -> primary_expression .)
    MINUSEQUALS     reduce using rule 55 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 55 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 55 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 55 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 55 (postfix_expression -> primary_expression .)


state 59

    (81) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 81 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 81 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 81 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 81 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 81 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 81 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 81 (unary_operator -> ADDRESS .)
    EXMARK          reduce using rule 81 (unary_operator -> ADDRESS .)
    ID              reduce using rule 81 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 81 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 81 (unary_operator -> ADDRESS .)
    STR_CONST       reduce using rule 81 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 81 (unary_operator -> ADDRESS .)


state 60

    (85) unary_operator -> EXMARK .

    LPAREN          reduce using rule 85 (unary_operator -> EXMARK .)
    PLUSPLUS        reduce using rule 85 (unary_operator -> EXMARK .)
    MINUSMINUS      reduce using rule 85 (unary_operator -> EXMARK .)
    ADDRESS         reduce using rule 85 (unary_operator -> EXMARK .)
    TIMES           reduce using rule 85 (unary_operator -> EXMARK .)
    PLUS            reduce using rule 85 (unary_operator -> EXMARK .)
    MINUS           reduce using rule 85 (unary_operator -> EXMARK .)
    EXMARK          reduce using rule 85 (unary_operator -> EXMARK .)
    ID              reduce using rule 85 (unary_operator -> EXMARK .)
    INT_CONST       reduce using rule 85 (unary_operator -> EXMARK .)
    FLOAT_CONST     reduce using rule 85 (unary_operator -> EXMARK .)
    STR_CONST       reduce using rule 85 (unary_operator -> EXMARK .)
    CHAR_CONST      reduce using rule 85 (unary_operator -> EXMARK .)


state 61

    (62) primary_expression -> identifier .

    LBRACKET        reduce using rule 62 (primary_expression -> identifier .)
    LPAREN          reduce using rule 62 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 62 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 62 (primary_expression -> identifier .)
    TIMES           reduce using rule 62 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 62 (primary_expression -> identifier .)
    MOD             reduce using rule 62 (primary_expression -> identifier .)
    PLUS            reduce using rule 62 (primary_expression -> identifier .)
    MINUS           reduce using rule 62 (primary_expression -> identifier .)
    LT              reduce using rule 62 (primary_expression -> identifier .)
    LE              reduce using rule 62 (primary_expression -> identifier .)
    GT              reduce using rule 62 (primary_expression -> identifier .)
    GE              reduce using rule 62 (primary_expression -> identifier .)
    EQ              reduce using rule 62 (primary_expression -> identifier .)
    NE              reduce using rule 62 (primary_expression -> identifier .)
    AND             reduce using rule 62 (primary_expression -> identifier .)
    OR              reduce using rule 62 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 62 (primary_expression -> identifier .)
    EQUALS          reduce using rule 62 (primary_expression -> identifier .)
    TIMESEQUALS     reduce using rule 62 (primary_expression -> identifier .)
    DIVIDEEQUALS    reduce using rule 62 (primary_expression -> identifier .)
    MODEQUALS       reduce using rule 62 (primary_expression -> identifier .)
    PLUSEQUALS      reduce using rule 62 (primary_expression -> identifier .)
    MINUSEQUALS     reduce using rule 62 (primary_expression -> identifier .)
    COMMA           reduce using rule 62 (primary_expression -> identifier .)
    SEMI            reduce using rule 62 (primary_expression -> identifier .)
    RPAREN          reduce using rule 62 (primary_expression -> identifier .)
    RBRACE          reduce using rule 62 (primary_expression -> identifier .)


state 62

    (63) primary_expression -> constant .

    LBRACKET        reduce using rule 63 (primary_expression -> constant .)
    LPAREN          reduce using rule 63 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 63 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 63 (primary_expression -> constant .)
    TIMES           reduce using rule 63 (primary_expression -> constant .)
    DIVIDE          reduce using rule 63 (primary_expression -> constant .)
    MOD             reduce using rule 63 (primary_expression -> constant .)
    PLUS            reduce using rule 63 (primary_expression -> constant .)
    MINUS           reduce using rule 63 (primary_expression -> constant .)
    LT              reduce using rule 63 (primary_expression -> constant .)
    LE              reduce using rule 63 (primary_expression -> constant .)
    GT              reduce using rule 63 (primary_expression -> constant .)
    GE              reduce using rule 63 (primary_expression -> constant .)
    EQ              reduce using rule 63 (primary_expression -> constant .)
    NE              reduce using rule 63 (primary_expression -> constant .)
    AND             reduce using rule 63 (primary_expression -> constant .)
    OR              reduce using rule 63 (primary_expression -> constant .)
    RBRACKET        reduce using rule 63 (primary_expression -> constant .)
    EQUALS          reduce using rule 63 (primary_expression -> constant .)
    TIMESEQUALS     reduce using rule 63 (primary_expression -> constant .)
    DIVIDEEQUALS    reduce using rule 63 (primary_expression -> constant .)
    MODEQUALS       reduce using rule 63 (primary_expression -> constant .)
    PLUSEQUALS      reduce using rule 63 (primary_expression -> constant .)
    MINUSEQUALS     reduce using rule 63 (primary_expression -> constant .)
    COMMA           reduce using rule 63 (primary_expression -> constant .)
    SEMI            reduce using rule 63 (primary_expression -> constant .)
    RPAREN          reduce using rule 63 (primary_expression -> constant .)
    RBRACE          reduce using rule 63 (primary_expression -> constant .)


state 63

    (65) constant -> INT_CONST .

    LBRACKET        reduce using rule 65 (constant -> INT_CONST .)
    LPAREN          reduce using rule 65 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 65 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 65 (constant -> INT_CONST .)
    TIMES           reduce using rule 65 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 65 (constant -> INT_CONST .)
    MOD             reduce using rule 65 (constant -> INT_CONST .)
    PLUS            reduce using rule 65 (constant -> INT_CONST .)
    MINUS           reduce using rule 65 (constant -> INT_CONST .)
    LT              reduce using rule 65 (constant -> INT_CONST .)
    LE              reduce using rule 65 (constant -> INT_CONST .)
    GT              reduce using rule 65 (constant -> INT_CONST .)
    GE              reduce using rule 65 (constant -> INT_CONST .)
    EQ              reduce using rule 65 (constant -> INT_CONST .)
    NE              reduce using rule 65 (constant -> INT_CONST .)
    AND             reduce using rule 65 (constant -> INT_CONST .)
    OR              reduce using rule 65 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 65 (constant -> INT_CONST .)
    EQUALS          reduce using rule 65 (constant -> INT_CONST .)
    TIMESEQUALS     reduce using rule 65 (constant -> INT_CONST .)
    DIVIDEEQUALS    reduce using rule 65 (constant -> INT_CONST .)
    MODEQUALS       reduce using rule 65 (constant -> INT_CONST .)
    PLUSEQUALS      reduce using rule 65 (constant -> INT_CONST .)
    MINUSEQUALS     reduce using rule 65 (constant -> INT_CONST .)
    COMMA           reduce using rule 65 (constant -> INT_CONST .)
    SEMI            reduce using rule 65 (constant -> INT_CONST .)
    RPAREN          reduce using rule 65 (constant -> INT_CONST .)
    RBRACE          reduce using rule 65 (constant -> INT_CONST .)


state 64

    (66) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 66 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 66 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 66 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 66 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 66 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 66 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 66 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 66 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 66 (constant -> FLOAT_CONST .)
    LT              reduce using rule 66 (constant -> FLOAT_CONST .)
    LE              reduce using rule 66 (constant -> FLOAT_CONST .)
    GT              reduce using rule 66 (constant -> FLOAT_CONST .)
    GE              reduce using rule 66 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 66 (constant -> FLOAT_CONST .)
    NE              reduce using rule 66 (constant -> FLOAT_CONST .)
    AND             reduce using rule 66 (constant -> FLOAT_CONST .)
    OR              reduce using rule 66 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 66 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 66 (constant -> FLOAT_CONST .)
    TIMESEQUALS     reduce using rule 66 (constant -> FLOAT_CONST .)
    DIVIDEEQUALS    reduce using rule 66 (constant -> FLOAT_CONST .)
    MODEQUALS       reduce using rule 66 (constant -> FLOAT_CONST .)
    PLUSEQUALS      reduce using rule 66 (constant -> FLOAT_CONST .)
    MINUSEQUALS     reduce using rule 66 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 66 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 66 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 66 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 66 (constant -> FLOAT_CONST .)


state 65

    (67) constant -> STR_CONST .

    LBRACKET        reduce using rule 67 (constant -> STR_CONST .)
    LPAREN          reduce using rule 67 (constant -> STR_CONST .)
    PLUSPLUS        reduce using rule 67 (constant -> STR_CONST .)
    MINUSMINUS      reduce using rule 67 (constant -> STR_CONST .)
    TIMES           reduce using rule 67 (constant -> STR_CONST .)
    DIVIDE          reduce using rule 67 (constant -> STR_CONST .)
    MOD             reduce using rule 67 (constant -> STR_CONST .)
    PLUS            reduce using rule 67 (constant -> STR_CONST .)
    MINUS           reduce using rule 67 (constant -> STR_CONST .)
    LT              reduce using rule 67 (constant -> STR_CONST .)
    LE              reduce using rule 67 (constant -> STR_CONST .)
    GT              reduce using rule 67 (constant -> STR_CONST .)
    GE              reduce using rule 67 (constant -> STR_CONST .)
    EQ              reduce using rule 67 (constant -> STR_CONST .)
    NE              reduce using rule 67 (constant -> STR_CONST .)
    AND             reduce using rule 67 (constant -> STR_CONST .)
    OR              reduce using rule 67 (constant -> STR_CONST .)
    RBRACKET        reduce using rule 67 (constant -> STR_CONST .)
    EQUALS          reduce using rule 67 (constant -> STR_CONST .)
    TIMESEQUALS     reduce using rule 67 (constant -> STR_CONST .)
    DIVIDEEQUALS    reduce using rule 67 (constant -> STR_CONST .)
    MODEQUALS       reduce using rule 67 (constant -> STR_CONST .)
    PLUSEQUALS      reduce using rule 67 (constant -> STR_CONST .)
    MINUSEQUALS     reduce using rule 67 (constant -> STR_CONST .)
    COMMA           reduce using rule 67 (constant -> STR_CONST .)
    SEMI            reduce using rule 67 (constant -> STR_CONST .)
    RPAREN          reduce using rule 67 (constant -> STR_CONST .)
    RBRACE          reduce using rule 67 (constant -> STR_CONST .)


state 66

    (68) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 68 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 68 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 68 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 68 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 68 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 68 (constant -> CHAR_CONST .)
    MOD             reduce using rule 68 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 68 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 68 (constant -> CHAR_CONST .)
    LT              reduce using rule 68 (constant -> CHAR_CONST .)
    LE              reduce using rule 68 (constant -> CHAR_CONST .)
    GT              reduce using rule 68 (constant -> CHAR_CONST .)
    GE              reduce using rule 68 (constant -> CHAR_CONST .)
    EQ              reduce using rule 68 (constant -> CHAR_CONST .)
    NE              reduce using rule 68 (constant -> CHAR_CONST .)
    AND             reduce using rule 68 (constant -> CHAR_CONST .)
    OR              reduce using rule 68 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 68 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 68 (constant -> CHAR_CONST .)
    TIMESEQUALS     reduce using rule 68 (constant -> CHAR_CONST .)
    DIVIDEEQUALS    reduce using rule 68 (constant -> CHAR_CONST .)
    MODEQUALS       reduce using rule 68 (constant -> CHAR_CONST .)
    PLUSEQUALS      reduce using rule 68 (constant -> CHAR_CONST .)
    MINUSEQUALS     reduce using rule 68 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 68 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 68 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 68 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 68 (constant -> CHAR_CONST .)


state 67

    (25) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (87) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 109


state 68

    (26) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 110


state 69

    (86) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 86 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 86 (parameter_list -> parameter_declaration .)


state 70

    (32) identifier_list_opt -> identifier_list .
    (31) identifier_list -> identifier_list . identifier
    (27) identifier -> . ID

    RPAREN          reduce using rule 32 (identifier_list_opt -> identifier_list .)
    ID              shift and go to state 17

    identifier                     shift and go to state 111

state 71

    (33) identifier_list_opt -> empty .

    RPAREN          reduce using rule 33 (identifier_list_opt -> empty .)


state 72

    (88) parameter_declaration -> type_specifier . declarator
    (17) declarator -> . direct_declarator
    (18) declarator -> . pointer_opt direct_declarator
    (22) direct_declarator -> . identifier
    (23) direct_declarator -> . LPAREN declarator RPAREN
    (24) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (25) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (26) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (19) pointer_opt -> . TIMES pointer
    (20) pointer_opt -> . TIMES empty
    (27) identifier -> . ID

    LPAREN          shift and go to state 15
    TIMES           shift and go to state 16
    ID              shift and go to state 17

    declarator                     shift and go to state 112
    direct_declarator              shift and go to state 12
    pointer_opt                    shift and go to state 13
    identifier                     shift and go to state 14

state 73

    (30) identifier_list -> identifier .

    ID              reduce using rule 30 (identifier_list -> identifier .)
    RPAREN          reduce using rule 30 (identifier_list -> identifier .)


state 74

    (23) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 23 (direct_declarator -> LPAREN declarator RPAREN .)


state 75

    (6) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 76

    (94) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 94 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 94 (init_declarator -> declarator EQUALS initializer .)


state 77

    (95) initializer -> assignment_expression .

    COMMA           reduce using rule 95 (initializer -> assignment_expression .)
    SEMI            reduce using rule 95 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 95 (initializer -> assignment_expression .)


state 78

    (96) initializer -> LBRACE . initializer_list RBRACE
    (97) initializer -> LBRACE . initializer_list COMMA RBRACE
    (98) initializer_list -> . initializer
    (99) initializer_list -> . initializer_list COMMA initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    initializer_list               shift and go to state 113
    initializer                    shift and go to state 114
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 79

    (73) assignment_expression -> binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 73 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 73 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 73 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 73 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 73 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LT              shift and go to state 89
    LE              shift and go to state 90
    GT              shift and go to state 91
    GE              shift and go to state 92
    EQ              shift and go to state 93
    NE              shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96


state 80

    (74) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (49) cast_expression -> unary_expression .
    (75) assignment_operator -> . EQUALS
    (76) assignment_operator -> . TIMESEQUALS
    (77) assignment_operator -> . DIVIDEEQUALS
    (78) assignment_operator -> . MODEQUALS
    (79) assignment_operator -> . PLUSEQUALS
    (80) assignment_operator -> . MINUSEQUALS

    TIMES           reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> unary_expression .)
    MOD             reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 49 (cast_expression -> unary_expression .)
    LT              reduce using rule 49 (cast_expression -> unary_expression .)
    LE              reduce using rule 49 (cast_expression -> unary_expression .)
    GT              reduce using rule 49 (cast_expression -> unary_expression .)
    GE              reduce using rule 49 (cast_expression -> unary_expression .)
    EQ              reduce using rule 49 (cast_expression -> unary_expression .)
    NE              reduce using rule 49 (cast_expression -> unary_expression .)
    AND             reduce using rule 49 (cast_expression -> unary_expression .)
    OR              reduce using rule 49 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 49 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 49 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 49 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 49 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 116
    TIMESEQUALS     shift and go to state 117
    DIVIDEEQUALS    shift and go to state 118
    MODEQUALS       shift and go to state 119
    PLUSEQUALS      shift and go to state 120
    MINUSEQUALS     shift and go to state 121

    assignment_operator            shift and go to state 115

state 81

    (92) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 92 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 92 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 82

    (100) compound_statement -> LBRACE declaration_list_opt . statement_list_opt RBRACE
    (103) statement_list_opt -> . statement_list
    (104) statement_list_opt -> . empty
    (101) statement_list -> . statement
    (102) statement_list -> . statement_list statement
    (126) empty -> .
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RBRACE          reduce using rule 126 (empty -> .)
    SEMI            reduce using rule 126 (empty -> .)
    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    statement_list_opt             shift and go to state 122
    statement_list                 shift and go to state 123
    empty                          shift and go to state 124
    statement                      shift and go to state 125
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression_opt                 shift and go to state 134
    expression                     shift and go to state 136
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 83

    (24) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 84

    (36) binary_expression -> binary_expression TIMES . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 144
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 85

    (37) binary_expression -> binary_expression DIVIDE . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 86

    (38) binary_expression -> binary_expression MOD . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 146
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 87

    (39) binary_expression -> binary_expression PLUS . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 147
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 88

    (40) binary_expression -> binary_expression MINUS . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 148
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 89

    (41) binary_expression -> binary_expression LT . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 149
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 90

    (42) binary_expression -> binary_expression LE . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 150
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 91

    (43) binary_expression -> binary_expression GT . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 151
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 92

    (44) binary_expression -> binary_expression GE . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 152
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 93

    (45) binary_expression -> binary_expression EQ . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 94

    (46) binary_expression -> binary_expression NE . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 154
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 95

    (47) binary_expression -> binary_expression AND . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 155
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 96

    (48) binary_expression -> binary_expression OR . binary_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    binary_expression              shift and go to state 156
    cast_expression                shift and go to state 48
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 97

    (50) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 157


state 98

    (64) primary_expression -> LPAREN expression . RPAREN
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 159


state 99

    (69) expression -> assignment_expression .

    RPAREN          reduce using rule 69 (expression -> assignment_expression .)
    COMMA           reduce using rule 69 (expression -> assignment_expression .)
    SEMI            reduce using rule 69 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 69 (expression -> assignment_expression .)


state 100

    (56) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    postfix_expression             shift and go to state 54
    expression                     shift and go to state 160
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 101

    (57) postfix_expression -> postfix_expression LPAREN . argument_expression_opt RPAREN
    (60) argument_expression_opt -> . argument_expression
    (61) argument_expression_opt -> . empty
    (71) argument_expression -> . assignment_expression
    (72) argument_expression -> . argument_expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RPAREN          reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    postfix_expression             shift and go to state 54
    argument_expression_opt        shift and go to state 161
    argument_expression            shift and go to state 162
    empty                          shift and go to state 163
    assignment_expression          shift and go to state 164
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 102

    (58) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUALS     reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDEEQUALS    reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUALS       reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUALS      reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUALS     reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 58 (postfix_expression -> postfix_expression PLUSPLUS .)


state 103

    (59) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUALS     reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDEEQUALS    reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUALS       reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUALS      reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUALS     reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 59 (postfix_expression -> postfix_expression MINUSMINUS .)


state 104

    (52) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUALS     reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDEEQUALS    reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUALS       reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUALS      reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUALS     reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 52 (unary_expression -> PLUSPLUS unary_expression .)


state 105

    (64) primary_expression -> LPAREN . expression RPAREN
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 98
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 106

    (53) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUALS     reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDEEQUALS    reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUALS       reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUALS      reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUALS     reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 53 (unary_expression -> MINUSMINUS unary_expression .)


state 107

    (54) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUALS     reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    DIVIDEEQUALS    reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    MODEQUALS       reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUALS      reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUALS     reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 54 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 54 (unary_expression -> unary_operator cast_expression .)


state 108

    (25) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 109

    (87) parameter_list -> parameter_list COMMA . parameter_declaration
    (88) parameter_declaration -> . type_specifier declarator
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT

    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    parameter_declaration          shift and go to state 165
    type_specifier                 shift and go to state 72

state 110

    (26) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 26 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 111

    (31) identifier_list -> identifier_list identifier .

    ID              reduce using rule 31 (identifier_list -> identifier_list identifier .)
    RPAREN          reduce using rule 31 (identifier_list -> identifier_list identifier .)


state 112

    (88) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 88 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 88 (parameter_declaration -> type_specifier declarator .)


state 113

    (96) initializer -> LBRACE initializer_list . RBRACE
    (97) initializer -> LBRACE initializer_list . COMMA RBRACE
    (99) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 166
    COMMA           shift and go to state 167


state 114

    (98) initializer_list -> initializer .

    RBRACE          reduce using rule 98 (initializer_list -> initializer .)
    COMMA           reduce using rule 98 (initializer_list -> initializer .)


state 115

    (74) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    unary_expression               shift and go to state 80
    assignment_expression          shift and go to state 168
    binary_expression              shift and go to state 79
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 116

    (75) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 75 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 75 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 75 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 75 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 75 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 75 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 75 (assignment_operator -> EQUALS .)
    EXMARK          reduce using rule 75 (assignment_operator -> EQUALS .)
    ID              reduce using rule 75 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 75 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 75 (assignment_operator -> EQUALS .)
    STR_CONST       reduce using rule 75 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 75 (assignment_operator -> EQUALS .)


state 117

    (76) assignment_operator -> TIMESEQUALS .

    PLUSPLUS        reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    MINUSMINUS      reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    LPAREN          reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    ADDRESS         reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    TIMES           reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    PLUS            reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    MINUS           reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    EXMARK          reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    ID              reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    INT_CONST       reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    FLOAT_CONST     reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    STR_CONST       reduce using rule 76 (assignment_operator -> TIMESEQUALS .)
    CHAR_CONST      reduce using rule 76 (assignment_operator -> TIMESEQUALS .)


state 118

    (77) assignment_operator -> DIVIDEEQUALS .

    PLUSPLUS        reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    MINUSMINUS      reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    LPAREN          reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    ADDRESS         reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    TIMES           reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    PLUS            reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    MINUS           reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    EXMARK          reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    ID              reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    INT_CONST       reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    FLOAT_CONST     reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    STR_CONST       reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)
    CHAR_CONST      reduce using rule 77 (assignment_operator -> DIVIDEEQUALS .)


state 119

    (78) assignment_operator -> MODEQUALS .

    PLUSPLUS        reduce using rule 78 (assignment_operator -> MODEQUALS .)
    MINUSMINUS      reduce using rule 78 (assignment_operator -> MODEQUALS .)
    LPAREN          reduce using rule 78 (assignment_operator -> MODEQUALS .)
    ADDRESS         reduce using rule 78 (assignment_operator -> MODEQUALS .)
    TIMES           reduce using rule 78 (assignment_operator -> MODEQUALS .)
    PLUS            reduce using rule 78 (assignment_operator -> MODEQUALS .)
    MINUS           reduce using rule 78 (assignment_operator -> MODEQUALS .)
    EXMARK          reduce using rule 78 (assignment_operator -> MODEQUALS .)
    ID              reduce using rule 78 (assignment_operator -> MODEQUALS .)
    INT_CONST       reduce using rule 78 (assignment_operator -> MODEQUALS .)
    FLOAT_CONST     reduce using rule 78 (assignment_operator -> MODEQUALS .)
    STR_CONST       reduce using rule 78 (assignment_operator -> MODEQUALS .)
    CHAR_CONST      reduce using rule 78 (assignment_operator -> MODEQUALS .)


state 120

    (79) assignment_operator -> PLUSEQUALS .

    PLUSPLUS        reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    MINUSMINUS      reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    LPAREN          reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    ADDRESS         reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    TIMES           reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    PLUS            reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    MINUS           reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    EXMARK          reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    ID              reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    INT_CONST       reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    FLOAT_CONST     reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    STR_CONST       reduce using rule 79 (assignment_operator -> PLUSEQUALS .)
    CHAR_CONST      reduce using rule 79 (assignment_operator -> PLUSEQUALS .)


state 121

    (80) assignment_operator -> MINUSEQUALS .

    PLUSPLUS        reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    MINUSMINUS      reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    LPAREN          reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    ADDRESS         reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    TIMES           reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    PLUS            reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    MINUS           reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    EXMARK          reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    ID              reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    INT_CONST       reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    FLOAT_CONST     reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    STR_CONST       reduce using rule 80 (assignment_operator -> MINUSEQUALS .)
    CHAR_CONST      reduce using rule 80 (assignment_operator -> MINUSEQUALS .)


state 122

    (100) compound_statement -> LBRACE declaration_list_opt statement_list_opt . RBRACE

    RBRACE          shift and go to state 169


state 123

    (103) statement_list_opt -> statement_list .
    (102) statement_list -> statement_list . statement
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RBRACE          reduce using rule 103 (statement_list_opt -> statement_list .)
    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    statement                      shift and go to state 170
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression_opt                 shift and go to state 134
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 124

    (104) statement_list_opt -> empty .
    (115) expression_opt -> empty .

    RBRACE          reduce using rule 104 (statement_list_opt -> empty .)
    SEMI            reduce using rule 115 (expression_opt -> empty .)


state 125

    (101) statement_list -> statement .

    LBRACE          reduce using rule 101 (statement_list -> statement .)
    IF              reduce using rule 101 (statement_list -> statement .)
    WHILE           reduce using rule 101 (statement_list -> statement .)
    FOR             reduce using rule 101 (statement_list -> statement .)
    BREAK           reduce using rule 101 (statement_list -> statement .)
    RETURN          reduce using rule 101 (statement_list -> statement .)
    ASSERT          reduce using rule 101 (statement_list -> statement .)
    PRINT           reduce using rule 101 (statement_list -> statement .)
    READ            reduce using rule 101 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 101 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 101 (statement_list -> statement .)
    LPAREN          reduce using rule 101 (statement_list -> statement .)
    ADDRESS         reduce using rule 101 (statement_list -> statement .)
    TIMES           reduce using rule 101 (statement_list -> statement .)
    PLUS            reduce using rule 101 (statement_list -> statement .)
    MINUS           reduce using rule 101 (statement_list -> statement .)
    EXMARK          reduce using rule 101 (statement_list -> statement .)
    ID              reduce using rule 101 (statement_list -> statement .)
    INT_CONST       reduce using rule 101 (statement_list -> statement .)
    FLOAT_CONST     reduce using rule 101 (statement_list -> statement .)
    STR_CONST       reduce using rule 101 (statement_list -> statement .)
    CHAR_CONST      reduce using rule 101 (statement_list -> statement .)
    SEMI            reduce using rule 101 (statement_list -> statement .)
    RBRACE          reduce using rule 101 (statement_list -> statement .)


state 126

    (105) statement -> expression_statement .

    LBRACE          reduce using rule 105 (statement -> expression_statement .)
    IF              reduce using rule 105 (statement -> expression_statement .)
    WHILE           reduce using rule 105 (statement -> expression_statement .)
    FOR             reduce using rule 105 (statement -> expression_statement .)
    BREAK           reduce using rule 105 (statement -> expression_statement .)
    RETURN          reduce using rule 105 (statement -> expression_statement .)
    ASSERT          reduce using rule 105 (statement -> expression_statement .)
    PRINT           reduce using rule 105 (statement -> expression_statement .)
    READ            reduce using rule 105 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 105 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 105 (statement -> expression_statement .)
    LPAREN          reduce using rule 105 (statement -> expression_statement .)
    ADDRESS         reduce using rule 105 (statement -> expression_statement .)
    TIMES           reduce using rule 105 (statement -> expression_statement .)
    PLUS            reduce using rule 105 (statement -> expression_statement .)
    MINUS           reduce using rule 105 (statement -> expression_statement .)
    EXMARK          reduce using rule 105 (statement -> expression_statement .)
    ID              reduce using rule 105 (statement -> expression_statement .)
    INT_CONST       reduce using rule 105 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 105 (statement -> expression_statement .)
    STR_CONST       reduce using rule 105 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 105 (statement -> expression_statement .)
    SEMI            reduce using rule 105 (statement -> expression_statement .)
    RBRACE          reduce using rule 105 (statement -> expression_statement .)
    ELSE            reduce using rule 105 (statement -> expression_statement .)


state 127

    (106) statement -> compound_statement .

    LBRACE          reduce using rule 106 (statement -> compound_statement .)
    IF              reduce using rule 106 (statement -> compound_statement .)
    WHILE           reduce using rule 106 (statement -> compound_statement .)
    FOR             reduce using rule 106 (statement -> compound_statement .)
    BREAK           reduce using rule 106 (statement -> compound_statement .)
    RETURN          reduce using rule 106 (statement -> compound_statement .)
    ASSERT          reduce using rule 106 (statement -> compound_statement .)
    PRINT           reduce using rule 106 (statement -> compound_statement .)
    READ            reduce using rule 106 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 106 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 106 (statement -> compound_statement .)
    LPAREN          reduce using rule 106 (statement -> compound_statement .)
    ADDRESS         reduce using rule 106 (statement -> compound_statement .)
    TIMES           reduce using rule 106 (statement -> compound_statement .)
    PLUS            reduce using rule 106 (statement -> compound_statement .)
    MINUS           reduce using rule 106 (statement -> compound_statement .)
    EXMARK          reduce using rule 106 (statement -> compound_statement .)
    ID              reduce using rule 106 (statement -> compound_statement .)
    INT_CONST       reduce using rule 106 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 106 (statement -> compound_statement .)
    STR_CONST       reduce using rule 106 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 106 (statement -> compound_statement .)
    SEMI            reduce using rule 106 (statement -> compound_statement .)
    RBRACE          reduce using rule 106 (statement -> compound_statement .)
    ELSE            reduce using rule 106 (statement -> compound_statement .)


state 128

    (107) statement -> selection_statement .

    LBRACE          reduce using rule 107 (statement -> selection_statement .)
    IF              reduce using rule 107 (statement -> selection_statement .)
    WHILE           reduce using rule 107 (statement -> selection_statement .)
    FOR             reduce using rule 107 (statement -> selection_statement .)
    BREAK           reduce using rule 107 (statement -> selection_statement .)
    RETURN          reduce using rule 107 (statement -> selection_statement .)
    ASSERT          reduce using rule 107 (statement -> selection_statement .)
    PRINT           reduce using rule 107 (statement -> selection_statement .)
    READ            reduce using rule 107 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 107 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 107 (statement -> selection_statement .)
    LPAREN          reduce using rule 107 (statement -> selection_statement .)
    ADDRESS         reduce using rule 107 (statement -> selection_statement .)
    TIMES           reduce using rule 107 (statement -> selection_statement .)
    PLUS            reduce using rule 107 (statement -> selection_statement .)
    MINUS           reduce using rule 107 (statement -> selection_statement .)
    EXMARK          reduce using rule 107 (statement -> selection_statement .)
    ID              reduce using rule 107 (statement -> selection_statement .)
    INT_CONST       reduce using rule 107 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 107 (statement -> selection_statement .)
    STR_CONST       reduce using rule 107 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 107 (statement -> selection_statement .)
    SEMI            reduce using rule 107 (statement -> selection_statement .)
    RBRACE          reduce using rule 107 (statement -> selection_statement .)
    ELSE            reduce using rule 107 (statement -> selection_statement .)


state 129

    (108) statement -> iteration_statement .

    LBRACE          reduce using rule 108 (statement -> iteration_statement .)
    IF              reduce using rule 108 (statement -> iteration_statement .)
    WHILE           reduce using rule 108 (statement -> iteration_statement .)
    FOR             reduce using rule 108 (statement -> iteration_statement .)
    BREAK           reduce using rule 108 (statement -> iteration_statement .)
    RETURN          reduce using rule 108 (statement -> iteration_statement .)
    ASSERT          reduce using rule 108 (statement -> iteration_statement .)
    PRINT           reduce using rule 108 (statement -> iteration_statement .)
    READ            reduce using rule 108 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 108 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 108 (statement -> iteration_statement .)
    LPAREN          reduce using rule 108 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 108 (statement -> iteration_statement .)
    TIMES           reduce using rule 108 (statement -> iteration_statement .)
    PLUS            reduce using rule 108 (statement -> iteration_statement .)
    MINUS           reduce using rule 108 (statement -> iteration_statement .)
    EXMARK          reduce using rule 108 (statement -> iteration_statement .)
    ID              reduce using rule 108 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 108 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 108 (statement -> iteration_statement .)
    STR_CONST       reduce using rule 108 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 108 (statement -> iteration_statement .)
    SEMI            reduce using rule 108 (statement -> iteration_statement .)
    RBRACE          reduce using rule 108 (statement -> iteration_statement .)
    ELSE            reduce using rule 108 (statement -> iteration_statement .)


state 130

    (109) statement -> jump_statement .

    LBRACE          reduce using rule 109 (statement -> jump_statement .)
    IF              reduce using rule 109 (statement -> jump_statement .)
    WHILE           reduce using rule 109 (statement -> jump_statement .)
    FOR             reduce using rule 109 (statement -> jump_statement .)
    BREAK           reduce using rule 109 (statement -> jump_statement .)
    RETURN          reduce using rule 109 (statement -> jump_statement .)
    ASSERT          reduce using rule 109 (statement -> jump_statement .)
    PRINT           reduce using rule 109 (statement -> jump_statement .)
    READ            reduce using rule 109 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 109 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 109 (statement -> jump_statement .)
    LPAREN          reduce using rule 109 (statement -> jump_statement .)
    ADDRESS         reduce using rule 109 (statement -> jump_statement .)
    TIMES           reduce using rule 109 (statement -> jump_statement .)
    PLUS            reduce using rule 109 (statement -> jump_statement .)
    MINUS           reduce using rule 109 (statement -> jump_statement .)
    EXMARK          reduce using rule 109 (statement -> jump_statement .)
    ID              reduce using rule 109 (statement -> jump_statement .)
    INT_CONST       reduce using rule 109 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 109 (statement -> jump_statement .)
    STR_CONST       reduce using rule 109 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 109 (statement -> jump_statement .)
    SEMI            reduce using rule 109 (statement -> jump_statement .)
    RBRACE          reduce using rule 109 (statement -> jump_statement .)
    ELSE            reduce using rule 109 (statement -> jump_statement .)


state 131

    (110) statement -> assert_statement .

    LBRACE          reduce using rule 110 (statement -> assert_statement .)
    IF              reduce using rule 110 (statement -> assert_statement .)
    WHILE           reduce using rule 110 (statement -> assert_statement .)
    FOR             reduce using rule 110 (statement -> assert_statement .)
    BREAK           reduce using rule 110 (statement -> assert_statement .)
    RETURN          reduce using rule 110 (statement -> assert_statement .)
    ASSERT          reduce using rule 110 (statement -> assert_statement .)
    PRINT           reduce using rule 110 (statement -> assert_statement .)
    READ            reduce using rule 110 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 110 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 110 (statement -> assert_statement .)
    LPAREN          reduce using rule 110 (statement -> assert_statement .)
    ADDRESS         reduce using rule 110 (statement -> assert_statement .)
    TIMES           reduce using rule 110 (statement -> assert_statement .)
    PLUS            reduce using rule 110 (statement -> assert_statement .)
    MINUS           reduce using rule 110 (statement -> assert_statement .)
    EXMARK          reduce using rule 110 (statement -> assert_statement .)
    ID              reduce using rule 110 (statement -> assert_statement .)
    INT_CONST       reduce using rule 110 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 110 (statement -> assert_statement .)
    STR_CONST       reduce using rule 110 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 110 (statement -> assert_statement .)
    SEMI            reduce using rule 110 (statement -> assert_statement .)
    RBRACE          reduce using rule 110 (statement -> assert_statement .)
    ELSE            reduce using rule 110 (statement -> assert_statement .)


state 132

    (111) statement -> print_statement .

    LBRACE          reduce using rule 111 (statement -> print_statement .)
    IF              reduce using rule 111 (statement -> print_statement .)
    WHILE           reduce using rule 111 (statement -> print_statement .)
    FOR             reduce using rule 111 (statement -> print_statement .)
    BREAK           reduce using rule 111 (statement -> print_statement .)
    RETURN          reduce using rule 111 (statement -> print_statement .)
    ASSERT          reduce using rule 111 (statement -> print_statement .)
    PRINT           reduce using rule 111 (statement -> print_statement .)
    READ            reduce using rule 111 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> print_statement .)
    LPAREN          reduce using rule 111 (statement -> print_statement .)
    ADDRESS         reduce using rule 111 (statement -> print_statement .)
    TIMES           reduce using rule 111 (statement -> print_statement .)
    PLUS            reduce using rule 111 (statement -> print_statement .)
    MINUS           reduce using rule 111 (statement -> print_statement .)
    EXMARK          reduce using rule 111 (statement -> print_statement .)
    ID              reduce using rule 111 (statement -> print_statement .)
    INT_CONST       reduce using rule 111 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 111 (statement -> print_statement .)
    STR_CONST       reduce using rule 111 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 111 (statement -> print_statement .)
    SEMI            reduce using rule 111 (statement -> print_statement .)
    RBRACE          reduce using rule 111 (statement -> print_statement .)
    ELSE            reduce using rule 111 (statement -> print_statement .)


state 133

    (112) statement -> read_statement .

    LBRACE          reduce using rule 112 (statement -> read_statement .)
    IF              reduce using rule 112 (statement -> read_statement .)
    WHILE           reduce using rule 112 (statement -> read_statement .)
    FOR             reduce using rule 112 (statement -> read_statement .)
    BREAK           reduce using rule 112 (statement -> read_statement .)
    RETURN          reduce using rule 112 (statement -> read_statement .)
    ASSERT          reduce using rule 112 (statement -> read_statement .)
    PRINT           reduce using rule 112 (statement -> read_statement .)
    READ            reduce using rule 112 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> read_statement .)
    LPAREN          reduce using rule 112 (statement -> read_statement .)
    ADDRESS         reduce using rule 112 (statement -> read_statement .)
    TIMES           reduce using rule 112 (statement -> read_statement .)
    PLUS            reduce using rule 112 (statement -> read_statement .)
    MINUS           reduce using rule 112 (statement -> read_statement .)
    EXMARK          reduce using rule 112 (statement -> read_statement .)
    ID              reduce using rule 112 (statement -> read_statement .)
    INT_CONST       reduce using rule 112 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 112 (statement -> read_statement .)
    STR_CONST       reduce using rule 112 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 112 (statement -> read_statement .)
    SEMI            reduce using rule 112 (statement -> read_statement .)
    RBRACE          reduce using rule 112 (statement -> read_statement .)
    ELSE            reduce using rule 112 (statement -> read_statement .)


state 134

    (113) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 172


state 135

    (116) selection_statement -> IF . LPAREN expression RPAREN statement
    (117) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 173


state 136

    (114) expression_opt -> expression .
    (70) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 114 (expression_opt -> expression .)
    RPAREN          reduce using rule 114 (expression_opt -> expression .)
    COMMA           shift and go to state 159


state 137

    (118) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 174


state 138

    (119) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 175


state 139

    (121) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 176


state 140

    (122) jump_statement -> RETURN . expression_opt SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 177
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 141

    (123) assert_statement -> ASSERT . expression SEMI
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 178
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 142

    (124) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 179


state 143

    (125) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 180


state 144

    (36) binary_expression -> binary_expression TIMES binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 36 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 145

    (37) binary_expression -> binary_expression DIVIDE binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 37 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 146

    (38) binary_expression -> binary_expression MOD binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 38 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 147

    (39) binary_expression -> binary_expression PLUS binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86

  ! TIMES           [ reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 39 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 148

    (40) binary_expression -> binary_expression MINUS binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86

  ! TIMES           [ reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 40 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 149

    (41) binary_expression -> binary_expression LT binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

  ! TIMES           [ reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 41 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 150

    (42) binary_expression -> binary_expression LE binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

  ! TIMES           [ reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 42 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 151

    (43) binary_expression -> binary_expression GT binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

  ! TIMES           [ reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 43 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 152

    (44) binary_expression -> binary_expression GE binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

  ! TIMES           [ reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 44 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 153

    (45) binary_expression -> binary_expression EQ binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    LE              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    GT              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    GE              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

  ! TIMES           [ reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 45 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 154

    (46) binary_expression -> binary_expression NE binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    LE              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    GT              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    GE              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

  ! TIMES           [ reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 46 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ shift and go to state 89 ]
  ! LE              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 91 ]
  ! GE              [ shift and go to state 92 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 155

    (47) binary_expression -> binary_expression AND binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LT              shift and go to state 89
    LE              shift and go to state 90
    GT              shift and go to state 91
    GE              shift and go to state 92
    EQ              shift and go to state 93
    NE              shift and go to state 94

  ! TIMES           [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 47 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 156

    (48) binary_expression -> binary_expression OR binary_expression .
    (36) binary_expression -> binary_expression . TIMES binary_expression
    (37) binary_expression -> binary_expression . DIVIDE binary_expression
    (38) binary_expression -> binary_expression . MOD binary_expression
    (39) binary_expression -> binary_expression . PLUS binary_expression
    (40) binary_expression -> binary_expression . MINUS binary_expression
    (41) binary_expression -> binary_expression . LT binary_expression
    (42) binary_expression -> binary_expression . LE binary_expression
    (43) binary_expression -> binary_expression . GT binary_expression
    (44) binary_expression -> binary_expression . GE binary_expression
    (45) binary_expression -> binary_expression . EQ binary_expression
    (46) binary_expression -> binary_expression . NE binary_expression
    (47) binary_expression -> binary_expression . AND binary_expression
    (48) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LT              shift and go to state 89
    LE              shift and go to state 90
    GT              shift and go to state 91
    GE              shift and go to state 92
    EQ              shift and go to state 93
    NE              shift and go to state 94

  ! TIMES           [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 48 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 157

    (50) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    cast_expression                shift and go to state 181
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 158

    (64) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUALS     reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEEQUALS    reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUALS       reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUALS      reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUALS     reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 64 (primary_expression -> LPAREN expression RPAREN .)


state 159

    (70) expression -> expression COMMA . assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    assignment_expression          shift and go to state 182
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 160

    (56) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (70) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 183
    COMMA           shift and go to state 159


state 161

    (57) postfix_expression -> postfix_expression LPAREN argument_expression_opt . RPAREN

    RPAREN          shift and go to state 184


state 162

    (60) argument_expression_opt -> argument_expression .
    (72) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          reduce using rule 60 (argument_expression_opt -> argument_expression .)
    COMMA           shift and go to state 185


state 163

    (61) argument_expression_opt -> empty .

    RPAREN          reduce using rule 61 (argument_expression_opt -> empty .)


state 164

    (71) argument_expression -> assignment_expression .

    COMMA           reduce using rule 71 (argument_expression -> assignment_expression .)
    RPAREN          reduce using rule 71 (argument_expression -> assignment_expression .)


state 165

    (87) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 87 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 87 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 166

    (96) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)


state 167

    (97) initializer -> LBRACE initializer_list COMMA . RBRACE
    (99) initializer_list -> initializer_list COMMA . initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RBRACE          shift and go to state 186
    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    initializer                    shift and go to state 187
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 168

    (74) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 74 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 74 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 74 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 74 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 74 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 169

    (100) compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .

    VOID            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    CHAR            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INT             reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FLOAT           reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    LPAREN          reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    TIMES           reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ID              reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    $end            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    LBRACE          reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    IF              reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    WHILE           reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FOR             reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    BREAK           reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    RETURN          reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ASSERT          reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PRINT           reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    READ            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ADDRESS         reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PLUS            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    MINUS           reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    EXMARK          reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INT_CONST       reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    STR_CONST       reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    SEMI            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    RBRACE          reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ELSE            reduce using rule 100 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)


state 170

    (102) statement_list -> statement_list statement .

    LBRACE          reduce using rule 102 (statement_list -> statement_list statement .)
    IF              reduce using rule 102 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 102 (statement_list -> statement_list statement .)
    FOR             reduce using rule 102 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 102 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 102 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 102 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 102 (statement_list -> statement_list statement .)
    READ            reduce using rule 102 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 102 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 102 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 102 (statement_list -> statement_list statement .)
    ADDRESS         reduce using rule 102 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 102 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 102 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 102 (statement_list -> statement_list statement .)
    EXMARK          reduce using rule 102 (statement_list -> statement_list statement .)
    ID              reduce using rule 102 (statement_list -> statement_list statement .)
    INT_CONST       reduce using rule 102 (statement_list -> statement_list statement .)
    FLOAT_CONST     reduce using rule 102 (statement_list -> statement_list statement .)
    STR_CONST       reduce using rule 102 (statement_list -> statement_list statement .)
    CHAR_CONST      reduce using rule 102 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 102 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 102 (statement_list -> statement_list statement .)


state 171

    (115) expression_opt -> empty .

    SEMI            reduce using rule 115 (expression_opt -> empty .)
    RPAREN          reduce using rule 115 (expression_opt -> empty .)


state 172

    (113) expression_statement -> expression_opt SEMI .

    LBRACE          reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    EXMARK          reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    STR_CONST       reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 113 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 113 (expression_statement -> expression_opt SEMI .)


state 173

    (116) selection_statement -> IF LPAREN . expression RPAREN statement
    (117) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 188
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 174

    (118) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 189
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 175

    (119) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (16) declaration -> . type_specifier init_declarator_list_opt SEMI
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (12) type_specifier -> . VOID
    (13) type_specifier -> . CHAR
    (14) type_specifier -> . INT
    (15) type_specifier -> . FLOAT
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    SEMI            reduce using rule 126 (empty -> .)
    VOID            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 190
    declaration                    shift and go to state 191
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    type_specifier                 shift and go to state 28
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 176

    (121) jump_statement -> BREAK SEMI .

    LBRACE          reduce using rule 121 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 121 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 121 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 121 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 121 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 121 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 121 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 121 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 121 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 121 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 121 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 121 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 121 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 121 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 121 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 121 (jump_statement -> BREAK SEMI .)
    EXMARK          reduce using rule 121 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 121 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 121 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 121 (jump_statement -> BREAK SEMI .)
    STR_CONST       reduce using rule 121 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 121 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 121 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 121 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 121 (jump_statement -> BREAK SEMI .)


state 177

    (122) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 192


state 178

    (123) assert_statement -> ASSERT expression . SEMI
    (70) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 193
    COMMA           shift and go to state 159


state 179

    (124) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RPAREN          reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 194
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 180

    (125) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (71) argument_expression -> . assignment_expression
    (72) argument_expression -> . argument_expression COMMA assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    argument_expression            shift and go to state 195
    assignment_expression          shift and go to state 164
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 181

    (50) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GE              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NE              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESEQUALS     reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDEEQUALS    reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODEQUALS       reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSEQUALS      reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSEQUALS     reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 50 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 182

    (70) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 70 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 70 (expression -> expression COMMA assignment_expression .)


state 183

    (56) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUALS     reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDEEQUALS    reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUALS       reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUALS      reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUALS     reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 56 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 184

    (57) postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .

    LBRACKET        reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LPAREN          reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUSPLUS        reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUSMINUS      reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    TIMES           reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIVIDE          reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MOD             reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUS            reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUS           reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LT              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LE              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    GT              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    GE              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQ              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    NE              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    AND             reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    OR              reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACKET        reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQUALS          reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    TIMESEQUALS     reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIVIDEEQUALS    reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MODEQUALS       reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUSEQUALS      reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUSEQUALS     reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    COMMA           reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    SEMI            reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RPAREN          reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACE          reduce using rule 57 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)


state 185

    (72) argument_expression -> argument_expression COMMA . assignment_expression
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    assignment_expression          shift and go to state 196
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 186

    (97) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 187

    (99) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 99 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 99 (initializer_list -> initializer_list COMMA initializer .)


state 188

    (116) selection_statement -> IF LPAREN expression . RPAREN statement
    (117) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 159


state 189

    (118) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (70) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 159


state 190

    (119) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 199


state 191

    (120) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 200
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 192

    (122) jump_statement -> RETURN expression_opt SEMI .

    LBRACE          reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    ADDRESS         reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    EXMARK          reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    INT_CONST       reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    STR_CONST       reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_CONST      reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    RBRACE          reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 122 (jump_statement -> RETURN expression_opt SEMI .)


state 193

    (123) assert_statement -> ASSERT expression SEMI .

    LBRACE          reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    EXMARK          reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    STR_CONST       reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 123 (assert_statement -> ASSERT expression SEMI .)


state 194

    (124) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 201


state 195

    (125) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (72) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 202
    COMMA           shift and go to state 185


state 196

    (72) argument_expression -> argument_expression COMMA assignment_expression .

    COMMA           reduce using rule 72 (argument_expression -> argument_expression COMMA assignment_expression .)
    RPAREN          reduce using rule 72 (argument_expression -> argument_expression COMMA assignment_expression .)


state 197

    (116) selection_statement -> IF LPAREN expression RPAREN . statement
    (117) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 136
    statement                      shift and go to state 203
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression_opt                 shift and go to state 134
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 198

    (118) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 136
    statement                      shift and go to state 204
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression_opt                 shift and go to state 134
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 199

    (119) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 205
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 200

    (120) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 206


state 201

    (124) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 207


state 202

    (125) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 208


state 203

    (116) selection_statement -> IF LPAREN expression RPAREN statement .
    (117) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXMARK          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STR_CONST       reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 209

  ! ELSE            [ reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 204

    (118) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXMARK          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STR_CONST       reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 205

    (119) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 210


state 206

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RPAREN          reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 211
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 207

    (124) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    LBRACE          reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUSPLUS        reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUSMINUS      reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    EXMARK          reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STR_CONST       reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RBRACE          reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 124 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 208

    (125) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    LBRACE          reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    EXMARK          reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STR_CONST       reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACE          reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 125 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 209

    (117) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression                     shift and go to state 136
    statement                      shift and go to state 212
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression_opt                 shift and go to state 134
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 210

    (119) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    RPAREN          reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 213
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 211

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 214


state 212

    (117) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    LBRACE          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXMARK          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STR_CONST       reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 213

    (119) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 215


state 214

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 134
    statement                      shift and go to state 216
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 215

    (119) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (105) statement -> . expression_statement
    (106) statement -> . compound_statement
    (107) statement -> . selection_statement
    (108) statement -> . iteration_statement
    (109) statement -> . jump_statement
    (110) statement -> . assert_statement
    (111) statement -> . print_statement
    (112) statement -> . read_statement
    (113) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (121) jump_statement -> . BREAK SEMI
    (122) jump_statement -> . RETURN expression_opt SEMI
    (123) assert_statement -> . ASSERT expression SEMI
    (124) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (125) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (114) expression_opt -> . expression
    (115) expression_opt -> . empty
    (69) expression -> . assignment_expression
    (70) expression -> . expression COMMA assignment_expression
    (126) empty -> .
    (73) assignment_expression -> . binary_expression
    (74) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (35) binary_expression -> . cast_expression
    (36) binary_expression -> . binary_expression TIMES binary_expression
    (37) binary_expression -> . binary_expression DIVIDE binary_expression
    (38) binary_expression -> . binary_expression MOD binary_expression
    (39) binary_expression -> . binary_expression PLUS binary_expression
    (40) binary_expression -> . binary_expression MINUS binary_expression
    (41) binary_expression -> . binary_expression LT binary_expression
    (42) binary_expression -> . binary_expression LE binary_expression
    (43) binary_expression -> . binary_expression GT binary_expression
    (44) binary_expression -> . binary_expression GE binary_expression
    (45) binary_expression -> . binary_expression EQ binary_expression
    (46) binary_expression -> . binary_expression NE binary_expression
    (47) binary_expression -> . binary_expression AND binary_expression
    (48) binary_expression -> . binary_expression OR binary_expression
    (51) unary_expression -> . postfix_expression
    (52) unary_expression -> . PLUSPLUS unary_expression
    (53) unary_expression -> . MINUSMINUS unary_expression
    (54) unary_expression -> . unary_operator cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (55) postfix_expression -> . primary_expression
    (56) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (57) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (58) postfix_expression -> . postfix_expression PLUSPLUS
    (59) postfix_expression -> . postfix_expression MINUSMINUS
    (81) unary_operator -> . ADDRESS
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (85) unary_operator -> . EXMARK
    (62) primary_expression -> . identifier
    (63) primary_expression -> . constant
    (64) primary_expression -> . LPAREN expression RPAREN
    (27) identifier -> . ID
    (65) constant -> . INT_CONST
    (66) constant -> . FLOAT_CONST
    (67) constant -> . STR_CONST
    (68) constant -> . CHAR_CONST

    LBRACE          shift and go to state 41
    IF              shift and go to state 135
    WHILE           shift and go to state 137
    FOR             shift and go to state 138
    BREAK           shift and go to state 139
    RETURN          shift and go to state 140
    ASSERT          shift and go to state 141
    PRINT           shift and go to state 142
    READ            shift and go to state 143
    SEMI            reduce using rule 126 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    ADDRESS         shift and go to state 59
    TIMES           shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXMARK          shift and go to state 60
    ID              shift and go to state 17
    INT_CONST       shift and go to state 63
    FLOAT_CONST     shift and go to state 64
    STR_CONST       shift and go to state 65
    CHAR_CONST      shift and go to state 66

    expression_opt                 shift and go to state 134
    statement                      shift and go to state 217
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expression                     shift and go to state 136
    empty                          shift and go to state 171
    assignment_expression          shift and go to state 99
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 48
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 216

    (120) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    EXMARK          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STR_CONST       reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 217

    (119) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    EXMARK          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STR_CONST       reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 203 resolved as shift

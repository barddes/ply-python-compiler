Program: 
    FuncDef: 
        Type: ['int']   @ 1:1
        Decl: ID(name='checkPrime'  )
            FuncDecl: 
                ParamList: 
                    Decl: ID(name='n'  )
                        VarDecl: 
                            Type: ['int']   @ 1:16
                VarDecl: 
                    Type: ['int']   @ 1:1
        Compound:    @ 1:1
            Decl: ID(name='i'  )
                VarDecl: 
                    Type: ['int']   @ 2:5
            Decl: ID(name='isPrime'  )
                VarDecl: 
                    Type: ['int']   @ 2:5
                Constant: int, 1   @ 2:22
            For:    @ 3:5
                Assignment: =   @ 3:10
                    ID: i   @ 3:10
                    Constant: int, 2   @ 3:14
                BinaryOp: <=   @ 3:17
                    ID: i   @ 3:17
                    BinaryOp: /   @ 3:22
                        ID: n   @ 3:22
                        Constant: int, 2   @ 3:24
                UnaryOp: ++   @ 3:29
                    ID: i   @ 3:29
                Compound:    @ 3:1
                    If:    @ 4:9
                        BinaryOp: ==   @ 4:13
                            BinaryOp: %   @ 4:13
                                ID: n   @ 4:13
                                ID: i   @ 4:17
                            Constant: int, 0   @ 4:22
                        Compound:    @ 4:1
                            Assignment: =   @ 5:13
                                ID: isPrime   @ 5:13
                                Constant: int, 0   @ 5:23
                            Break: 
            Return:    @ 9:5
                ID: isPrime   @ 9:12
    FuncDef: 
        Type: ['int']   @ 12:1
        Decl: ID(name='main'  )
            FuncDecl: 
                VarDecl: 
                    Type: ['int']   @ 12:1
        Compound:    @ 12:1
            Decl: ID(name='a'  )
                VarDecl: 
                    Type: ['int']   @ 13:5
                Constant: int, 0   @ 13:13
            Decl: ID(name='b'  )
                VarDecl: 
                    Type: ['int']   @ 13:5
            Print:    @ 14:5
                Constant: string, "Digite algum numero:"   @ 14:11
            Read:    @ 16:5
                ID: a   @ 16:10
            Assignment: =   @ 17:5
                ID: b   @ 17:5
                FuncCall:    @ 17:9
                    ID: checkPrime   @ 17:9
                    ID: a   @ 17:20
            Return:    @ 18:5
                Constant: int, 0   @ 18:12

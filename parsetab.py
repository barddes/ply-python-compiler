
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALSleftORANDleftEQNEGTGELTLEleftPLUSPLUSMINUSMINUSleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEEQUALS ELSE EQ EQUALS EXMARK FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSEQUALS MINUSMINUS MOD MODEQUALS NE OR PLUS PLUSEQUALS PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STR_CONST TIMES TIMESEQUALS VOID WHILE program : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration : declaration\n         global_declaration : function_definition\n         function_definition : type_specifier declarator declaration_list_opt compound_statement\n                                | declarator declaration_list_opt compound_statement\n         declaration_list : declaration\n                             | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                 | empty\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         declaration : type_specifier init_declarator_list_opt SEMI\n         declarator : direct_declarator\n                       | pointer_opt direct_declarator\n         pointer_opt : TIMES pointer\n                        | TIMES empty\n         pointer : pointer_opt\n         direct_declarator : identifier\n                              | LPAREN declarator RPAREN\n                              | direct_declarator LBRACKET constant_expression_opt RBRACKET\n                              | direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list_opt RPAREN\n         identifier : ID\n         constant_expression_opt : constant_expression\n                                    | empty\n         identifier_list : identifier\n                            | identifier_list identifier\n         identifier_list_opt : identifier_list\n                                | empty\n         constant_expression : binary_expression\n         binary_expression : cast_expression\n                              | binary_expression TIMES binary_expression\n                              | binary_expression DIVIDE binary_expression\n                              | binary_expression MOD binary_expression\n                              | binary_expression PLUS binary_expression\n                              | binary_expression MINUS binary_expression\n                              | binary_expression LT binary_expression\n                              | binary_expression LE binary_expression\n                              | binary_expression GT binary_expression\n                              | binary_expression GE binary_expression\n                              | binary_expression EQ binary_expression\n                              | binary_expression NE binary_expression\n                              | binary_expression AND binary_expression\n                              | binary_expression OR binary_expression\n         cast_expression : unary_expression\n                            | LPAREN type_specifier RPAREN cast_expression\n         unary_expression : postfix_expression\n                             | PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n         postfix_expression : primary_expression\n                               | postfix_expression LBRACKET expression RBRACKET\n                               | postfix_expression LPAREN argument_expression_opt RPAREN\n                               | postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         argument_expression_opt : argument_expression\n                                    | empty\n         primary_expression : identifier\n                               | constant\n                               | LPAREN expression RPAREN\n         constant : INT_CONST\n                     | CHAR_CONST\n                     | FLOAT_CONST\n                     | STR_CONST\n         expression : assignment_expression\n                       | expression COMMA assignment_expression\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | TIMESEQUALS\n                                | DIVIDEEQUALS\n                                | MODEQUALS\n                                | PLUSEQUALS\n                                | MINUSEQUALS\n         unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | EXMARK\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n         init_declarator_list_opt : init_declarator_list\n                                     | empty\n         init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         initializer : assignment_expression\n                        | LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         compound_statement : LBRACE declaration_list_opt statement_list_opt RBRACE\n         statement_list : statement\n                           | statement_list statement\n         statement_list_opt : statement_list\n                               | empty\n         statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n         expression_statement : expression_opt SEMI\n         expression_opt : expression\n                           | empty\n         selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n                                | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n         jump_statement : BREAK SEMI\n                           | RETURN expression_opt SEMI\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,7,12,14,17,18,20,25,27,30,31,36,40,41,42,53,74,75,83,108,109,110,169,175,],[8,8,-2,-4,-5,8,-17,-22,-27,-3,8,8,-8,8,-18,-16,-7,8,-9,8,-23,-6,-24,-25,8,-26,-100,8,]),'CHAR':([0,2,3,4,5,7,12,14,17,18,20,25,27,30,31,36,40,41,42,53,74,75,83,108,109,110,169,175,],[9,9,-2,-4,-5,9,-17,-22,-27,-3,9,9,-8,9,-18,-16,-7,9,-9,9,-23,-6,-24,-25,9,-26,-100,9,]),'INT':([0,2,3,4,5,7,12,14,17,18,20,25,27,30,31,36,40,41,42,53,74,75,83,108,109,110,169,175,],[10,10,-2,-4,-5,10,-17,-22,-27,-3,10,10,-8,10,-18,-16,-7,10,-9,10,-23,-6,-24,-25,10,-26,-100,10,]),'FLOAT':([0,2,3,4,5,7,12,14,17,18,20,25,27,30,31,36,40,41,42,53,74,75,83,108,109,110,169,175,],[11,11,-2,-4,-5,11,-17,-22,-27,-3,11,11,-8,11,-18,-16,-7,11,-9,11,-23,-6,-24,-25,11,-26,-100,11,]),'LPAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,33,34,35,36,38,39,40,41,42,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,78,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,105,108,110,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,135,137,138,140,141,142,143,157,158,159,167,169,170,172,173,174,175,176,179,180,183,184,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[15,15,-2,-4,-5,15,-12,-13,-14,-15,30,15,-22,15,-126,-27,-3,-10,-11,-8,15,53,30,-19,-20,-21,-16,53,15,-7,-126,-9,-82,-83,-84,53,101,105,105,53,-55,-81,-85,-62,-63,-65,-66,-67,-68,15,-23,-6,53,53,-24,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-58,-59,53,-25,-26,53,-75,-76,-77,-78,-79,-80,53,-101,-105,-106,-107,-108,-109,-110,-111,-112,173,174,175,53,53,179,180,53,-64,53,53,-100,-102,-113,53,53,53,-121,53,53,-56,-57,53,53,-122,-123,53,53,53,-116,-118,53,-124,-125,53,53,-117,53,53,-120,-119,]),'TIMES':([0,2,3,4,5,6,8,9,10,11,15,16,17,18,25,26,27,28,29,36,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,75,78,79,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,167,169,170,172,173,174,175,176,179,180,181,183,184,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[16,16,-2,-4,-5,16,-12,-13,-14,-15,16,16,-27,-3,-10,-11,-8,16,49,-16,49,16,-7,-126,-9,84,-35,-82,-83,-84,-49,49,-51,49,49,49,-55,-81,-85,-62,-63,-65,-66,-67,-68,16,-6,49,84,-49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-58,-59,-52,49,-53,-54,49,-75,-76,-77,-78,-79,-80,49,-101,-105,-106,-107,-108,-109,-110,-111,-112,49,49,-36,-37,-38,84,84,84,84,84,84,84,84,84,84,49,-64,49,49,-100,-102,-113,49,49,49,-121,49,49,-50,-56,-57,49,49,-122,-123,49,49,49,-116,-118,49,-124,-125,49,49,-117,49,49,-120,-119,]),'ID':([0,2,3,4,5,6,8,9,10,11,13,15,16,17,18,25,26,27,28,29,30,33,34,35,36,38,39,40,41,42,49,50,51,53,55,56,57,59,60,70,72,73,75,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,111,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[17,17,-2,-4,-5,17,-12,-13,-14,-15,17,17,-126,-27,-3,-10,-11,-8,17,17,17,-19,-20,-21,-16,17,17,-7,-126,-9,-82,-83,-84,17,17,17,17,-81,-85,17,17,-30,-6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-31,17,-75,-76,-77,-78,-79,-80,17,-101,-105,-106,-107,-108,-109,-110,-111,-112,17,17,17,17,17,-100,-102,-113,17,17,17,-121,17,17,17,17,-122,-123,17,17,17,-116,-118,17,-124,-125,17,17,-117,17,17,-120,-119,]),'$end':([1,2,3,4,5,18,36,40,75,169,],[0,-1,-2,-4,-5,-3,-16,-7,-6,-100,]),'SEMI':([6,8,9,10,11,12,14,17,19,20,21,22,23,25,26,27,28,31,36,41,42,43,48,52,54,58,61,62,63,64,65,66,74,76,77,79,80,81,82,83,99,102,103,104,106,107,108,110,123,124,125,126,127,128,129,130,131,132,133,134,136,139,140,144,145,146,147,148,149,150,151,152,153,154,155,156,158,166,168,169,170,171,172,175,176,177,178,181,182,183,184,186,190,191,192,193,197,198,199,200,201,202,203,204,205,207,208,209,212,214,215,216,217,],[-126,-12,-13,-14,-15,-17,-22,-27,36,-93,-89,-90,-91,-10,-11,-8,-126,-18,-16,-126,-9,-93,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,-23,-94,-95,-73,-49,-92,-126,-24,-69,-58,-59,-52,-53,-54,-25,-26,-126,-115,-101,-105,-106,-107,-108,-109,-110,-111,-112,172,-114,176,-126,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,-96,-74,-100,-102,-115,-113,-126,-121,192,193,-50,-70,-56,-57,-97,199,-126,-122,-123,-126,-126,-126,206,207,208,-116,-118,210,-124,-125,-126,-117,-126,-126,-120,-119,]),'LBRACE':([7,12,14,17,20,24,25,26,27,31,36,37,38,41,42,74,78,82,83,108,110,123,125,126,127,128,129,130,131,132,133,167,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-126,-17,-22,-27,-126,41,-10,-11,-8,-18,-16,41,78,-126,-9,-23,78,41,-24,-25,-26,41,-101,-105,-106,-107,-108,-109,-110,-111,-112,78,-100,-102,-113,-121,-122,-123,41,41,-116,-118,-124,-125,41,-117,41,41,-120,-119,]),'RPAREN':([8,9,10,11,12,14,17,30,31,32,48,52,54,58,61,62,63,64,65,66,67,68,69,70,71,73,74,79,80,83,97,98,99,101,102,103,104,106,107,108,110,111,112,136,144,145,146,147,148,149,150,151,152,153,154,155,156,158,161,162,163,164,165,168,171,179,181,182,183,184,188,189,194,195,196,206,210,211,213,],[-12,-13,-14,-15,-17,-22,-27,-126,-18,74,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,108,110,-86,-32,-33,-30,-23,-73,-49,-24,157,158,-69,-126,-58,-59,-52,-53,-54,-25,-26,-31,-88,-114,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,184,-60,-61,-71,-87,-74,-115,-126,-50,-70,-56,-57,197,198,201,202,-72,-126,-126,214,215,]),'EQUALS':([12,14,17,20,31,43,52,54,58,61,62,63,64,65,66,74,80,83,102,103,104,106,107,108,110,158,181,183,184,],[-17,-22,-27,38,-18,38,-49,-51,-55,-62,-63,-65,-66,-67,-68,-23,116,-24,-58,-59,-52,-53,-54,-25,-26,-64,-50,-56,-57,]),'COMMA':([12,14,17,20,21,23,31,43,48,52,54,58,61,62,63,64,65,66,67,69,74,76,77,79,80,81,83,98,99,102,103,104,106,107,108,110,112,113,114,136,144,145,146,147,148,149,150,151,152,153,154,155,156,158,160,162,164,165,166,168,178,181,182,183,184,186,187,188,189,195,196,],[-17,-22,-27,-93,39,-91,-18,-93,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,109,-86,-23,-94,-95,-73,-49,-92,-24,159,-69,-58,-59,-52,-53,-54,-25,-26,-88,167,-98,159,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,159,185,-71,-87,-96,-74,159,-50,-70,-56,-57,-97,-99,159,159,185,-72,]),'LBRACKET':([12,14,17,31,54,58,61,62,63,64,65,66,74,83,102,103,108,110,158,183,184,],[29,-22,-27,29,100,-55,-62,-63,-65,-66,-67,-68,-23,-24,-58,-59,-25,-26,-64,-56,-57,]),'PLUSPLUS':([17,25,26,27,29,36,38,41,42,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,158,159,167,169,170,172,173,174,175,176,179,180,183,184,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-27,-10,-11,-8,55,-16,55,-126,-9,-82,-83,-84,55,102,55,55,55,-55,-81,-85,-62,-63,-65,-66,-67,-68,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-58,-59,55,55,-75,-76,-77,-78,-79,-80,55,-101,-105,-106,-107,-108,-109,-110,-111,-112,55,55,55,-64,55,55,-100,-102,-113,55,55,55,-121,55,55,-56,-57,55,55,-122,-123,55,55,55,-116,-118,55,-124,-125,55,55,-117,55,55,-120,-119,]),'MINUSMINUS':([17,25,26,27,29,36,38,41,42,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,158,159,167,169,170,172,173,174,175,176,179,180,183,184,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-27,-10,-11,-8,56,-16,56,-126,-9,-82,-83,-84,56,103,56,56,56,-55,-81,-85,-62,-63,-65,-66,-67,-68,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-58,-59,56,56,-75,-76,-77,-78,-79,-80,56,-101,-105,-106,-107,-108,-109,-110,-111,-112,56,56,56,-64,56,56,-100,-102,-113,56,56,56,-121,56,56,-56,-57,56,56,-122,-123,56,56,56,-116,-118,56,-124,-125,56,56,-117,56,56,-120,-119,]),'DIVIDE':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,85,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,85,-49,-58,-59,-52,-53,-54,-36,-37,-38,85,85,85,85,85,85,85,85,85,85,-64,-50,-56,-57,]),'MOD':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,86,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,86,-49,-58,-59,-52,-53,-54,-36,-37,-38,86,86,86,86,86,86,86,86,86,86,-64,-50,-56,-57,]),'PLUS':([17,25,26,27,29,36,38,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,167,169,170,172,173,174,175,176,179,180,181,183,184,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-27,-10,-11,-8,50,-16,50,-126,-9,87,-35,-82,-83,-84,-49,50,-51,50,50,50,-55,-81,-85,-62,-63,-65,-66,-67,-68,50,87,-49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-58,-59,-52,50,-53,-54,50,-75,-76,-77,-78,-79,-80,50,-101,-105,-106,-107,-108,-109,-110,-111,-112,50,50,-36,-37,-38,-39,-40,87,87,87,87,87,87,87,87,50,-64,50,50,-100,-102,-113,50,50,50,-121,50,50,-50,-56,-57,50,50,-122,-123,50,50,50,-116,-118,50,-124,-125,50,50,-117,50,50,-120,-119,]),'MINUS':([17,25,26,27,29,36,38,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,167,169,170,172,173,174,175,176,179,180,181,183,184,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-27,-10,-11,-8,51,-16,51,-126,-9,88,-35,-82,-83,-84,-49,51,-51,51,51,51,-55,-81,-85,-62,-63,-65,-66,-67,-68,51,88,-49,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-58,-59,-52,51,-53,-54,51,-75,-76,-77,-78,-79,-80,51,-101,-105,-106,-107,-108,-109,-110,-111,-112,51,51,-36,-37,-38,-39,-40,88,88,88,88,88,88,88,88,51,-64,51,51,-100,-102,-113,51,51,51,-121,51,51,-50,-56,-57,51,51,-122,-123,51,51,51,-116,-118,51,-124,-125,51,51,-117,51,51,-120,-119,]),'LT':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,89,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,89,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,89,89,-64,-50,-56,-57,]),'LE':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,90,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,90,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,90,90,-64,-50,-56,-57,]),'GT':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,91,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,91,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,91,91,-64,-50,-56,-57,]),'GE':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,92,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,92,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,92,92,-64,-50,-56,-57,]),'EQ':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,93,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,93,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,93,93,-64,-50,-56,-57,]),'NE':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,94,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,94,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,94,94,-64,-50,-56,-57,]),'AND':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,95,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,95,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,-50,-56,-57,]),'OR':([17,47,48,52,54,58,61,62,63,64,65,66,79,80,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,181,183,184,],[-27,96,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,96,-49,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,-50,-56,-57,]),'RBRACKET':([17,29,44,45,46,47,48,52,54,58,61,62,63,64,65,66,79,80,99,102,103,104,106,107,144,145,146,147,148,149,150,151,152,153,154,155,156,158,160,168,181,182,183,184,],[-27,-126,83,-28,-29,-34,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,-73,-49,-69,-58,-59,-52,-53,-54,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,183,-74,-50,-70,-56,-57,]),'TIMESEQUALS':([17,52,54,58,61,62,63,64,65,66,80,102,103,104,106,107,158,181,183,184,],[-27,-49,-51,-55,-62,-63,-65,-66,-67,-68,117,-58,-59,-52,-53,-54,-64,-50,-56,-57,]),'DIVIDEEQUALS':([17,52,54,58,61,62,63,64,65,66,80,102,103,104,106,107,158,181,183,184,],[-27,-49,-51,-55,-62,-63,-65,-66,-67,-68,118,-58,-59,-52,-53,-54,-64,-50,-56,-57,]),'MODEQUALS':([17,52,54,58,61,62,63,64,65,66,80,102,103,104,106,107,158,181,183,184,],[-27,-49,-51,-55,-62,-63,-65,-66,-67,-68,119,-58,-59,-52,-53,-54,-64,-50,-56,-57,]),'PLUSEQUALS':([17,52,54,58,61,62,63,64,65,66,80,102,103,104,106,107,158,181,183,184,],[-27,-49,-51,-55,-62,-63,-65,-66,-67,-68,120,-58,-59,-52,-53,-54,-64,-50,-56,-57,]),'MINUSEQUALS':([17,52,54,58,61,62,63,64,65,66,80,102,103,104,106,107,158,181,183,184,],[-27,-49,-51,-55,-62,-63,-65,-66,-67,-68,121,-58,-59,-52,-53,-54,-64,-50,-56,-57,]),'RBRACE':([17,25,26,27,36,41,42,48,52,54,58,61,62,63,64,65,66,77,79,80,82,102,103,104,106,107,113,114,122,123,124,125,126,127,128,129,130,131,132,133,144,145,146,147,148,149,150,151,152,153,154,155,156,158,166,167,168,169,170,172,176,181,183,184,186,187,192,193,203,204,207,208,212,216,217,],[-27,-10,-11,-8,-16,-126,-9,-35,-49,-51,-55,-62,-63,-65,-66,-67,-68,-95,-73,-49,-126,-58,-59,-52,-53,-54,166,-98,169,-103,-104,-101,-105,-106,-107,-108,-109,-110,-111,-112,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-64,-96,186,-74,-100,-102,-113,-121,-50,-56,-57,-97,-99,-122,-123,-116,-118,-124,-125,-117,-120,-119,]),'IF':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,135,135,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,135,135,-116,-118,-124,-125,135,-117,135,135,-120,-119,]),'WHILE':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,137,137,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,137,137,-116,-118,-124,-125,137,-117,137,137,-120,-119,]),'FOR':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,138,138,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,138,138,-116,-118,-124,-125,138,-117,138,138,-120,-119,]),'BREAK':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,139,139,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,139,139,-116,-118,-124,-125,139,-117,139,139,-120,-119,]),'RETURN':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,140,140,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,140,140,-116,-118,-124,-125,140,-117,140,140,-120,-119,]),'ASSERT':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,141,141,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,141,141,-116,-118,-124,-125,141,-117,141,141,-120,-119,]),'PRINT':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,142,142,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,142,142,-116,-118,-124,-125,142,-117,142,142,-120,-119,]),'READ':([25,26,27,36,41,42,82,123,125,126,127,128,129,130,131,132,133,169,170,172,176,192,193,197,198,203,204,207,208,209,212,214,215,216,217,],[-10,-11,-8,-16,-126,-9,143,143,-101,-105,-106,-107,-108,-109,-110,-111,-112,-100,-102,-113,-121,-122,-123,143,143,-116,-118,-124,-125,143,-117,143,143,-120,-119,]),'ADDRESS':([25,26,27,29,36,38,41,42,49,50,51,53,55,56,57,59,60,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-10,-11,-8,59,-16,59,-126,-9,-82,-83,-84,59,59,59,59,-81,-85,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-75,-76,-77,-78,-79,-80,59,-101,-105,-106,-107,-108,-109,-110,-111,-112,59,59,59,59,59,-100,-102,-113,59,59,59,-121,59,59,59,59,-122,-123,59,59,59,-116,-118,59,-124,-125,59,59,-117,59,59,-120,-119,]),'EXMARK':([25,26,27,29,36,38,41,42,49,50,51,53,55,56,57,59,60,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-10,-11,-8,60,-16,60,-126,-9,-82,-83,-84,60,60,60,60,-81,-85,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-75,-76,-77,-78,-79,-80,60,-101,-105,-106,-107,-108,-109,-110,-111,-112,60,60,60,60,60,-100,-102,-113,60,60,60,-121,60,60,60,60,-122,-123,60,60,60,-116,-118,60,-124,-125,60,60,-117,60,60,-120,-119,]),'INT_CONST':([25,26,27,29,36,38,41,42,49,50,51,53,55,56,57,59,60,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-10,-11,-8,63,-16,63,-126,-9,-82,-83,-84,63,63,63,63,-81,-85,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-75,-76,-77,-78,-79,-80,63,-101,-105,-106,-107,-108,-109,-110,-111,-112,63,63,63,63,63,-100,-102,-113,63,63,63,-121,63,63,63,63,-122,-123,63,63,63,-116,-118,63,-124,-125,63,63,-117,63,63,-120,-119,]),'CHAR_CONST':([25,26,27,29,36,38,41,42,49,50,51,53,55,56,57,59,60,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-10,-11,-8,64,-16,64,-126,-9,-82,-83,-84,64,64,64,64,-81,-85,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-75,-76,-77,-78,-79,-80,64,-101,-105,-106,-107,-108,-109,-110,-111,-112,64,64,64,64,64,-100,-102,-113,64,64,64,-121,64,64,64,64,-122,-123,64,64,64,-116,-118,64,-124,-125,64,64,-117,64,64,-120,-119,]),'FLOAT_CONST':([25,26,27,29,36,38,41,42,49,50,51,53,55,56,57,59,60,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-10,-11,-8,65,-16,65,-126,-9,-82,-83,-84,65,65,65,65,-81,-85,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-75,-76,-77,-78,-79,-80,65,-101,-105,-106,-107,-108,-109,-110,-111,-112,65,65,65,65,65,-100,-102,-113,65,65,65,-121,65,65,65,65,-122,-123,65,65,65,-116,-118,65,-124,-125,65,65,-117,65,65,-120,-119,]),'STR_CONST':([25,26,27,29,36,38,41,42,49,50,51,53,55,56,57,59,60,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,140,141,157,159,167,169,170,172,173,174,175,176,179,180,185,191,192,193,197,198,199,203,204,206,207,208,209,210,212,214,215,216,217,],[-10,-11,-8,66,-16,66,-126,-9,-82,-83,-84,66,66,66,66,-81,-85,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-75,-76,-77,-78,-79,-80,66,-101,-105,-106,-107,-108,-109,-110,-111,-112,66,66,66,66,66,-100,-102,-113,66,66,66,-121,66,66,66,66,-122,-123,66,66,66,-116,-118,66,-124,-125,66,66,-117,66,66,-120,-119,]),'ELSE':([126,127,128,129,130,131,132,133,169,172,176,192,193,203,204,207,208,212,216,217,],[-105,-106,-107,-108,-109,-110,-111,-112,-100,-113,-121,-122,-123,209,-118,-124,-125,-117,-120,-119,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,18,]),'declaration':([0,2,7,20,25,41,175,],[4,4,27,27,42,27,191,]),'function_definition':([0,2,],[5,5,]),'type_specifier':([0,2,7,20,25,30,41,53,109,175,],[6,6,28,28,28,72,28,97,72,28,]),'declarator':([0,2,6,15,28,39,72,],[7,7,20,32,43,43,112,]),'direct_declarator':([0,2,6,13,15,28,39,72,],[12,12,12,31,12,12,12,12,]),'pointer_opt':([0,2,6,15,16,28,39,72,],[13,13,13,13,35,13,13,13,]),'identifier':([0,2,6,13,15,28,29,30,38,39,53,55,56,57,70,72,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[14,14,14,14,14,14,61,73,61,14,61,61,61,61,111,14,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'init_declarator_list_opt':([6,28,],[19,19,]),'init_declarator_list':([6,28,],[21,21,]),'empty':([6,7,16,20,28,29,30,41,82,101,123,140,175,179,191,197,198,199,206,209,210,214,215,],[22,26,34,26,22,46,71,26,124,163,171,171,171,171,171,171,171,171,171,171,171,171,171,]),'init_declarator':([6,28,39,],[23,23,81,]),'declaration_list_opt':([7,20,41,],[24,37,82,]),'declaration_list':([7,20,41,],[25,25,25,]),'pointer':([16,],[33,]),'compound_statement':([24,37,82,123,197,198,209,214,215,],[40,75,127,127,127,127,127,127,127,]),'constant_expression_opt':([29,],[44,]),'constant_expression':([29,],[45,]),'binary_expression':([29,38,53,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[47,79,79,79,79,144,145,146,147,148,149,150,151,152,153,154,155,156,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'cast_expression':([29,38,53,57,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[48,48,48,107,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,181,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'unary_expression':([29,38,53,55,56,57,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[52,80,80,104,106,52,80,80,52,52,52,52,52,52,52,52,52,52,52,52,52,80,80,80,80,80,80,80,52,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'postfix_expression':([29,38,53,55,56,57,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([29,38,53,55,56,57,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'primary_expression':([29,38,53,55,56,57,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'constant':([29,38,53,55,56,57,78,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,115,123,140,141,157,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'parameter_list':([30,],[67,]),'identifier_list_opt':([30,],[68,]),'parameter_declaration':([30,109,],[69,165,]),'identifier_list':([30,],[70,]),'initializer':([38,78,167,],[76,114,187,]),'assignment_expression':([38,53,78,82,100,101,105,115,123,140,141,159,167,173,174,175,179,180,185,191,197,198,199,206,209,210,214,215,],[77,99,77,99,99,164,99,168,99,99,99,182,77,99,99,99,99,164,196,99,99,99,99,99,99,99,99,99,]),'expression':([53,82,100,105,123,140,141,173,174,175,179,191,197,198,199,206,209,210,214,215,],[98,136,160,98,136,136,178,188,189,136,136,136,136,136,136,136,136,136,136,136,]),'initializer_list':([78,],[113,]),'assignment_operator':([80,],[115,]),'statement_list_opt':([82,],[122,]),'statement_list':([82,],[123,]),'statement':([82,123,197,198,209,214,215,],[125,170,203,204,212,216,217,]),'expression_statement':([82,123,197,198,209,214,215,],[126,126,126,126,126,126,126,]),'selection_statement':([82,123,197,198,209,214,215,],[128,128,128,128,128,128,128,]),'iteration_statement':([82,123,197,198,209,214,215,],[129,129,129,129,129,129,129,]),'jump_statement':([82,123,197,198,209,214,215,],[130,130,130,130,130,130,130,]),'assert_statement':([82,123,197,198,209,214,215,],[131,131,131,131,131,131,131,]),'print_statement':([82,123,197,198,209,214,215,],[132,132,132,132,132,132,132,]),'read_statement':([82,123,197,198,209,214,215,],[133,133,133,133,133,133,133,]),'expression_opt':([82,123,140,175,179,191,197,198,199,206,209,210,214,215,],[134,134,177,190,194,200,134,134,205,211,134,213,134,134,]),'argument_expression_opt':([101,],[161,]),'argument_expression':([101,180,],[162,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',64),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',71),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',72),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_0','uc_parser.py',80),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_1','uc_parser.py',85),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition','uc_parser.py',90),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition','uc_parser.py',91),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',99),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',100),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',108),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',109),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',114),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',115),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',116),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',117),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','uc_parser.py',122),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','uc_parser.py',132),
  ('declarator -> pointer_opt direct_declarator','declarator',2,'p_declarator','uc_parser.py',133),
  ('pointer_opt -> TIMES pointer','pointer_opt',2,'p_pointer_opt','uc_parser.py',144),
  ('pointer_opt -> TIMES empty','pointer_opt',2,'p_pointer_opt','uc_parser.py',145),
  ('pointer -> pointer_opt','pointer',1,'p_pointer','uc_parser.py',150),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator','uc_parser.py',155),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','uc_parser.py',156),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator','uc_parser.py',157),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',158),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',159),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',171),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',176),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',177),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',182),
  ('identifier_list -> identifier_list identifier','identifier_list',2,'p_identifier_list','uc_parser.py',183),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',191),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',192),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',197),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',202),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',203),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',204),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',205),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',206),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',207),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',208),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',209),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',210),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',211),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',212),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',213),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',214),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',215),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','uc_parser.py',223),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','uc_parser.py',224),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','uc_parser.py',232),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',233),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',234),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','uc_parser.py',235),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','uc_parser.py',243),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','uc_parser.py',244),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression','uc_parser.py',245),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression','uc_parser.py',246),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression','uc_parser.py',247),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',259),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',260),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',265),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',266),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','uc_parser.py',267),
  ('constant -> INT_CONST','constant',1,'p_constant','uc_parser.py',275),
  ('constant -> CHAR_CONST','constant',1,'p_constant','uc_parser.py',276),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','uc_parser.py',277),
  ('constant -> STR_CONST','constant',1,'p_constant','uc_parser.py',278),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',283),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',284),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',292),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',293),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',301),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',302),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',310),
  ('assignment_operator -> TIMESEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',311),
  ('assignment_operator -> DIVIDEEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',312),
  ('assignment_operator -> MODEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',313),
  ('assignment_operator -> PLUSEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',314),
  ('assignment_operator -> MINUSEQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',315),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',320),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',321),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',322),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',323),
  ('unary_operator -> EXMARK','unary_operator',1,'p_unary_operator','uc_parser.py',324),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',329),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',330),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',338),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',344),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',345),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',350),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',351),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',360),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',361),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','uc_parser.py',369),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','uc_parser.py',370),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','uc_parser.py',371),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',379),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',380),
  ('compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE','compound_statement',4,'p_compound_statement','uc_parser.py',388),
  ('statement_list -> statement','statement_list',1,'p_statement_list','uc_parser.py',393),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','uc_parser.py',394),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','uc_parser.py',402),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','uc_parser.py',403),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',408),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',409),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',410),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',411),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',412),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',413),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',414),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',415),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',420),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',425),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',426),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser.py',431),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser.py',432),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','uc_parser.py',440),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser.py',441),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','uc_parser.py',442),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','uc_parser.py',452),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','uc_parser.py',453),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',461),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',466),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',471),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',476),
]
